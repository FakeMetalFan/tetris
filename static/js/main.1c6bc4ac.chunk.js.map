{"version":3,"sources":["components/Display/Display.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/key-code.js","const/tile-fill.js","view-models/tile.js","const/matrices.js","view-models/position.js","const/move-offset.js","view-models/move.js","utils/rotated-matrix.js","hooks/use-display.js","hooks/use-tetromino.js","components/Tetris/Tetris.js","hooks/use-interval.js","components/Tile/Tile.js","App.js","setupIcons.js","index.js"],"names":["Display","state","width","className","style","gridTemplateColumns","map","row","tile","colAddress","key","Footer","href","target","rel","icon","Date","getFullYear","Header","useDidUpdate","fn","fnRef","useRef","didMount","useEffect","current","deps","keyCode","tileFill","TileVM","fill","this","matrices","Position","rowAddress","immerable","moveOffset","Left","Right","Down","Move","_id","Symbol","Rotation","DownMove","LeftMove","offset","RightMove","getRotatedMatrix","matrix","produce","draft","forEach","_","reverse","actionType","reducer","type","payload","cloneDeep","merged","dr","position","isEmpty","filledRowsAddresses","emptyRow","sweptRowsCount","length","address","splice","unshift","id","Math","random","useTetromino","useReducer","dispatch","randomize","makeMove","isRotation","move","isAutoDrop","score","Tetris","height","useMemo","Array","emptyState","initialState","detectCollision","tetrominoState","some","rowAddressAhead","colAddressAhead","isDown","reduce","ac","push","displayState","useDisplay","container","focus","delay","intervalId","setInterval","clearInterval","useInterval","tabIndex","onKeyDown","code","onKeyUp","ref","Tile","memo","Error","App","library","add","faGithub","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c6bc4ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Tile } from '..';\r\n\r\nimport './Display.scss';\r\n\r\nexport const Display = ({ state, width }) => <div\r\n  className='display'\r\n  style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\r\n>\r\n  {state.map(row => row.map((tile, colAddress) => <Tile key={colAddress} state={tile} />))}\r\n</div>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => <footer>\r\n  <span>\r\n    Powered by\r\n    <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n    &copy;<span>{new Date().getFullYear()}</span>\r\n  </span>\r\n</footer>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => <header>\r\n  <span className='title'>Tetris</span>\r\n\r\n  <a href='https://github.com/FakeMetalFan/tetris' target='_blank' rel='noopener noreferrer'>\r\n    <FontAwesomeIcon icon={['fab', 'github']} />\r\n  </a>\r\n</header>;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const fnRef = useRef();\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn]);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fnRef.current();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n","export const keyCode = {\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n};\r\n","export const tileFill = {\r\n  None: 0,\r\n  I: 1,\r\n  J: 2,\r\n  L: 3,\r\n  O: 4,\r\n  S: 5,\r\n  T: 6,\r\n  Z: 7,\r\n};\r\n","import { tileFill } from 'const/tile-fill'; // to avoid circular dependency;\r\n\r\nexport class TileVM {\r\n  fill;\r\n\r\n  constructor(\r\n    fill = tileFill.None\r\n  ) {\r\n    this.fill = fill;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.fill === tileFill.None;\r\n  }\r\n}\r\n","import { TileVM } from 'view-models/tile'; // to avoid circular dependency;\r\n\r\nimport { tileFill } from './tile-fill';\r\n\r\nexport const matrices = [\r\n  [\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n  ],\r\n  [\r\n    [new TileVM, new TileVM(tileFill.J), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.J), new TileVM],\r\n    [new TileVM(tileFill.J), new TileVM(tileFill.J), new TileVM],\r\n  ],\r\n  [\r\n    [new TileVM, new TileVM(tileFill.L), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.L), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.L), new TileVM(tileFill.L)],\r\n  ],\r\n  [\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n  ],\r\n  [\r\n    [new TileVM, new TileVM(tileFill.S), new TileVM(tileFill.S)],\r\n    [new TileVM(tileFill.S), new TileVM(tileFill.S), new TileVM],\r\n    [new TileVM, new TileVM, new TileVM],\r\n  ],\r\n  [\r\n    [new TileVM, new TileVM(tileFill.T), new TileVM],\r\n    [new TileVM(tileFill.T), new TileVM(tileFill.T), new TileVM(tileFill.T)],\r\n    [new TileVM, new TileVM, new TileVM],\r\n  ],\r\n  [\r\n    [new TileVM(tileFill.Z), new TileVM(tileFill.Z), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.Z), new TileVM(tileFill.Z)],\r\n    [new TileVM, new TileVM, new TileVM],\r\n  ],\r\n];\r\n","import { immerable } from 'immer';\r\n\r\nexport class Position {\r\n  [immerable] = true;\r\n\r\n  rowAddress;\r\n  colAddress;\r\n\r\n  constructor(\r\n    rowAddress = 0,\r\n    colAddress = 0\r\n  ) {\r\n    this.rowAddress = rowAddress;\r\n    this.colAddress = colAddress;\r\n  }\r\n}\r\n","import { Position } from 'view-models/position' // to avoid circular dependency;\r\n\r\nexport const moveOffset = {\r\n  Left: new Position(0, -1),\r\n  Right: new Position(0, 1),\r\n  Down: new Position(1),\r\n};\r\n","import { moveOffset } from 'const';\r\n\r\nclass Move {\r\n  _id = Symbol(); // to always detect a new move;\r\n\r\n  get isRotation() {\r\n    return this instanceof Rotation;\r\n  }\r\n\r\n  get isDown() {\r\n    return this instanceof DownMove;\r\n  }\r\n}\r\n\r\nexport class LeftMove extends Move {\r\n  offset = moveOffset.Left;\r\n}\r\n\r\nexport class Rotation extends Move {}\r\n\r\nexport class RightMove extends Move {\r\n  offset = moveOffset.Right;\r\n}\r\n\r\nexport class DownMove extends Move {\r\n  offset = moveOffset.Down;\r\n}\r\n","import produce from 'immer';\r\n\r\nexport const getRotatedMatrix = matrix => produce(matrix, draft => {\r\n  draft.forEach((_, rowAddress) => {\r\n    draft[rowAddress] = matrix.map(row => row[rowAddress]);\r\n  });\r\n\r\n  draft.map(row => row.reverse());\r\n});\r\n","import { useEffect, useMemo, useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport some from 'lodash/some';\r\n\r\nimport { Position, TileVM } from 'view-models';\r\n\r\nimport { getRotatedMatrix } from 'utils/rotated-matrix';\r\n\r\nimport { useDidUpdate, useTetromino } from '.';\r\n\r\nconst actionType = {\r\n  DrawTetromino: 'draw-tetromino',\r\n  SweepFilledRows: 'sweep-filled-rows',\r\n  MergeState: 'merge-state',\r\n  Reset: 'reset',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => type === actionType.Reset ? cloneDeep(payload) : produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.DrawTetromino:\r\n      draft.current = produce(draft.merged, dr => {\r\n        const { matrix, position } = payload;\r\n\r\n        matrix.forEach((row, rowAddress) => {\r\n          row.forEach((tile, colAddress) => {\r\n            !tile.isEmpty && (dr[rowAddress + position.rowAddress][colAddress + position.colAddress] = tile);\r\n          });\r\n        });\r\n      });\r\n\r\n      break;\r\n    case actionType.SweepFilledRows:\r\n      const { filledRowsAddresses, emptyRow } = payload;\r\n\r\n      draft.sweptRowsCount += filledRowsAddresses.length;\r\n      draft.merged = produce(draft.current, dr => {\r\n        filledRowsAddresses.forEach(address => {\r\n          dr.splice(address, 1);\r\n          dr.unshift(emptyRow);\r\n        });\r\n      });\r\n\r\n      break;\r\n    case actionType.MergeState:\r\n      draft.merged = draft.current;\r\n  }\r\n});\r\n\r\nexport const useDisplay = ({ width, height, move }) => {\r\n  const emptyRow = useMemo(() => Array(width).fill(new TileVM), [width]);\r\n  const emptyState = useMemo(() => Array(height).fill(emptyRow), [emptyRow, height]);\r\n\r\n  const initialState = { current: emptyState, merged: emptyState, sweptRowsCount: 0 };\r\n\r\n  const [{ current, merged, sweptRowsCount }, dispatch] = useReducer(reducer, initialState);\r\n  const { id, matrix, position, randomize, makeMove } = useTetromino({ width });\r\n\r\n  const detectCollision = ({ tetrominoState = matrix, offset = new Position } = {}) =>\r\n    tetrominoState.some((row, rowAddress) => row.some(({ isEmpty }, colAddress) => {\r\n      const rowAddressAhead = rowAddress + position.rowAddress + offset.rowAddress;\r\n      const colAddressAhead = colAddress + position.colAddress + offset.colAddress;\r\n\r\n      return !isEmpty && (!merged[rowAddressAhead]?.[colAddressAhead]?.isEmpty\r\n        || rowAddressAhead >= height || colAddressAhead >= width || colAddressAhead < 0\r\n      );\r\n    }));\r\n\r\n  useEffect(() => {\r\n    randomize();\r\n  }, [merged]);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: actionType.DrawTetromino, payload: { matrix, position } });\r\n  }, [matrix, position]);\r\n\r\n  useDidUpdate(() => {\r\n    if (detectCollision(move.isRotation ? { tetrominoState: getRotatedMatrix(matrix) } : move)) {\r\n      if (move.isDown) {\r\n        const filledRowsAddresses = current.reduce((ac, row, rowAddress) => {\r\n          !some(row, 'isEmpty') && ac.push(rowAddress);\r\n\r\n          return ac;\r\n        }, []);\r\n\r\n        dispatch(filledRowsAddresses.length\r\n          ? { type: actionType.SweepFilledRows, payload: { filledRowsAddresses, emptyRow } }\r\n          : { type: actionType.MergeState }\r\n        );\r\n      }\r\n    } else makeMove(move);\r\n  }, move);\r\n\r\n  useDidUpdate(() => {\r\n    detectCollision() && dispatch({ type: actionType.Reset, payload: initialState });\r\n  }, id);\r\n\r\n  return { sweptRowsCount, displayState: current };\r\n};\r\n","import { useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { matrices } from 'const';\r\n\r\nimport { Position } from 'view-models';\r\n\r\nimport { getRotatedMatrix } from 'utils/rotated-matrix';\r\n\r\nconst actionType = {\r\n  Random: 'random',\r\n  Rotation: 'rotation',\r\n  Move: 'move',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.Random:\r\n      draft.id = Symbol(); // to always detect a new tetromino;\r\n      draft.matrix = matrices[Math.random() * matrices.length | 0];\r\n      draft.position = new Position(0, (payload.width - draft.matrix.length) / 2 | 0);\r\n\r\n      break;\r\n    case actionType.Move:\r\n      const { rowAddress = 0, colAddress = 0 } = payload.offset;\r\n\r\n      draft.position = produce(draft.position, dr => {\r\n        dr.rowAddress += rowAddress;\r\n        dr.colAddress += colAddress;\r\n      });\r\n\r\n      break;\r\n    case actionType.Rotation:\r\n      draft.matrix = getRotatedMatrix(draft.matrix);\r\n  }\r\n});\r\n\r\nexport const useTetromino = ({ width }) => {\r\n  const [{ id, matrix, position }, dispatch] = useReducer(reducer, {\r\n    id: Symbol(),\r\n    matrix: [],\r\n    position: new Position,\r\n  });\r\n\r\n  const randomize = () => {\r\n    dispatch({ type: actionType.Random, payload: { width } });\r\n  };\r\n\r\n  const makeMove = ({ isRotation, offset }) => {\r\n    dispatch(isRotation ? { type: actionType.Rotation } : { type: actionType.Move, payload: { offset } });\r\n  };\r\n\r\n  return { id, matrix, position, randomize, makeMove };\r\n};\r\n","import React, { useEffect, useRef, useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { useDisplay, useDidUpdate, useInterval } from 'hooks';\r\n\r\nimport { keyCode as code } from 'const';\r\n\r\nimport { LeftMove, Rotation, RightMove, DownMove } from 'view-models';\r\n\r\nimport { Display } from '..';\r\n\r\nimport './Tetris.scss';\r\n\r\nconst actionType = {\r\n  LeftMove: 'left-move',\r\n  Rotation: 'rotation',\r\n  RightMove: 'right-move',\r\n  DownMove: 'down-move',\r\n  EnableAutoDrop: 'enable-auto-drop',\r\n  UpdateScore: 'update-score',\r\n  AutoDrop: 'auto-drop',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.LeftMove:\r\n      draft.move = new LeftMove;\r\n\r\n      break;\r\n    case actionType.Rotation:\r\n      draft.move = new Rotation;\r\n\r\n      break;\r\n    case actionType.RightMove:\r\n      draft.move = new RightMove;\r\n\r\n      break;\r\n    case actionType.DownMove:\r\n      draft.isAutoDrop = false;\r\n      draft.move = new DownMove;\r\n\r\n      break;\r\n    case actionType.EnableAutoDrop:\r\n      draft.isAutoDrop = true;\r\n\r\n      break;\r\n    case actionType.UpdateScore:\r\n      const { sweptRowsCount } = payload;\r\n\r\n      draft.score = sweptRowsCount ? draft.score + sweptRowsCount * 10 : 0;\r\n\r\n      break;\r\n    case actionType.AutoDrop:\r\n      draft.move = new DownMove;\r\n  }\r\n});\r\n\r\nexport const Tetris = ({ width, height }) => {\r\n  const [{ score, move, isAutoDrop }, dispatch] = useReducer(reducer, { score: 0, move: null, isAutoDrop: true });\r\n  const { displayState, sweptRowsCount } = useDisplay({ width, height, move });\r\n  const container = useRef();\r\n\r\n  const handleKeyDown = ({ keyCode }) => {\r\n    keyCode === code.ArrowLeft && dispatch({ type: actionType.LeftMove });\r\n    keyCode === code.ArrowUp && dispatch({ type: actionType.Rotation });\r\n    keyCode === code.ArrowRight && dispatch({ type: actionType.RightMove });\r\n    keyCode === code.ArrowDown && dispatch({ type: actionType.DownMove });\r\n  };\r\n\r\n  const handleKeyUp = ({ keyCode }) => {\r\n    keyCode === code.ArrowDown && dispatch({ type: actionType.EnableAutoDrop });\r\n  };\r\n\r\n  useEffect(() => {\r\n    container.current.focus();\r\n  }, []);\r\n\r\n  useDidUpdate(() => {\r\n    dispatch({ type: actionType.UpdateScore, payload: { sweptRowsCount } });\r\n  }, sweptRowsCount);\r\n\r\n  useInterval(() => {\r\n    dispatch({ type: actionType.AutoDrop });\r\n  }, isAutoDrop ? 800 : null);\r\n\r\n  return <div className='tetris' tabIndex='0' onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} ref={container}>\r\n    <div className='score'>{score}</div>\r\n    <Display state={displayState} width={width} />\r\n  </div>;\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nimport { tileFill } from 'const';\r\n\r\nimport './Tile.scss';\r\n\r\nexport const Tile = memo(({ state: { fill } }) => {\r\n  let className = 'tile tile__';\r\n\r\n  switch (fill) {\r\n    case tileFill.None:\r\n      className += 'none';\r\n\r\n      break;\r\n    case tileFill.I:\r\n      className += 'i';\r\n\r\n      break;\r\n    case tileFill.J:\r\n      className += 'j'\r\n\r\n      break;\r\n    case tileFill.L:\r\n      className += 'l';\r\n\r\n      break;\r\n    case tileFill.O:\r\n      className += 'o';\r\n\r\n      break;\r\n    case tileFill.S:\r\n      className += 's';\r\n\r\n      break;\r\n    case tileFill.T:\r\n      className += 't';\r\n\r\n      break;\r\n    case tileFill.Z:\r\n      className += 'z';\r\n\r\n      break;\r\n    default:\r\n      throw new Error(`Unexpected tile fill of \"${fill}\"!`);\r\n  }\r\n\r\n  return <div className={className} />;\r\n});\r\n","import React from 'react';\r\n\r\nimport { Header, Tetris, Footer } from 'components';\r\n\r\nexport const App = () => <>\r\n  <Header />\r\n  <Tetris width={10} height={20} />\r\n  <Footer />\r\n</>;\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub);\r\n};\r\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport 'index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}