{"version":3,"sources":["components/Display/Display.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/key-code.js","const/tile-fill.js","const/matrices.js","utils/empty-tile.js","utils/rotated-matrix.js","hooks/use-display.js","hooks/use-tetromino.js","components/Tetris/Tetris.js","hooks/use-interval.js","components/Tile/Tile.js","App.js","setupIcons.js","index.js"],"names":["Display","state","width","className","style","gridTemplateColumns","map","row","tile","colAddress","key","Footer","href","target","rel","icon","Date","getFullYear","Header","useDidUpdate","fn","fnRef","useRef","didMount","useEffect","current","deps","keyCode","tileFill","matrices","isEmptyTile","getRotatedMatrix","matrix","produce","draft","forEach","_","rowAddress","reverse","actionType","reducer","type","payload","cloneDeep","merged","dr","position","filledRowsAddresses","emptyRow","sweptRowsCount","length","address","splice","unshift","Math","random","useTetromino","useReducer","dispatch","randomize","makeMove","isRotation","offset","downMove","isDown","move","isAutoDrop","score","Tetris","height","useMemo","Array","fill","emptyState","initialState","detectCollision","tetrominoState","some","rowAddressAhead","colAddressAhead","willCollide","reduce","ac","push","display","useDisplay","container","focus","delay","intervalId","setInterval","clearInterval","useInterval","tabIndex","onKeyDown","code","onKeyUp","ref","Tile","memo","Error","App","library","add","faGithub","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ce1bbc7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Tile } from '..';\r\n\r\nimport './Display.scss';\r\n\r\nexport const Display = ({ state, width }) => <div\r\n  className='display'\r\n  style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\r\n>\r\n  {state.map(row => row.map((tile, colAddress) => <Tile key={colAddress} state={tile} />))}\r\n</div>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => <footer>\r\n  <span>\r\n    Powered by\r\n    <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n    &copy;<span>{new Date().getFullYear()}</span>\r\n  </span>\r\n</footer>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => <header>\r\n  <span className='title'>Tetris</span>\r\n\r\n  <a href='https://github.com/FakeMetalFan/tetris' target='_blank' rel='noopener noreferrer'>\r\n    <FontAwesomeIcon icon={['fab', 'github']} />\r\n  </a>\r\n</header>;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const fnRef = useRef();\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn]);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fnRef.current();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n","export const keyCode = {\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n};\r\n","export const tileFill = {\r\n  None: 0,\r\n  I: 1,\r\n  J: 2,\r\n  L: 3,\r\n  O: 4,\r\n  S: 5,\r\n  T: 6,\r\n  Z: 7,\r\n};\r\n","import { tileFill } from './tile-fill';\r\n\r\nexport const matrices = [\r\n  [\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.J, tileFill.None],\r\n    [tileFill.None, tileFill.J, tileFill.None],\r\n    [tileFill.J, tileFill.J, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.L, tileFill.None],\r\n    [tileFill.None, tileFill.L, tileFill.None],\r\n    [tileFill.None, tileFill.L, tileFill.L],\r\n  ],\r\n  [\r\n    [tileFill.O, tileFill.O],\r\n    [tileFill.O, tileFill.O],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.S, tileFill.S],\r\n    [tileFill.S, tileFill.S, tileFill.None],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.T, tileFill.None],\r\n    [tileFill.T, tileFill.T, tileFill.T],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.Z, tileFill.Z, tileFill.None],\r\n    [tileFill.None, tileFill.Z, tileFill.Z],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n];\r\n","import { tileFill } from 'const';\r\n\r\nexport const isEmptyTile = tile => tile === tileFill.None;\r\n","import produce from 'immer';\r\n\r\nexport const getRotatedMatrix = matrix => produce(matrix, draft => {\r\n  draft.forEach((_, rowAddress) => {\r\n    draft[rowAddress] = matrix.map(row => row[rowAddress]);\r\n  });\r\n\r\n  draft.map(row => row.reverse());\r\n});\r\n","import { useEffect, useMemo, useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nimport { tileFill } from 'const';\r\n\r\nimport { isEmptyTile, getRotatedMatrix } from 'utils';\r\n\r\nimport { useDidUpdate, useTetromino } from '.';\r\n\r\nconst actionType = {\r\n  TetrominoDrawing: 'tetromino-drawing',\r\n  FilledRowsSweep: 'filled-rows-sweep',\r\n  StateMerging: 'state-merging',\r\n  Reset: 'reset',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => type === actionType.Reset ? cloneDeep(payload) : produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.TetrominoDrawing:\r\n      draft.current = produce(draft.merged, dr => {\r\n        const { matrix, position } = payload;\r\n\r\n        matrix.forEach((row, rowAddress) => {\r\n          row.forEach((tile, colAddress) => {\r\n            !isEmptyTile(tile) && (dr[rowAddress + position.rowAddress][colAddress + position.colAddress] = tile);\r\n          });\r\n        });\r\n      });\r\n\r\n      break;\r\n    case actionType.FilledRowsSweep:\r\n      const { filledRowsAddresses, emptyRow } = payload;\r\n\r\n      draft.sweptRowsCount += filledRowsAddresses.length;\r\n      draft.merged = produce(draft.current, dr => {\r\n        filledRowsAddresses.forEach(address => {\r\n          dr.splice(address, 1);\r\n          dr.unshift(emptyRow);\r\n        });\r\n      });\r\n\r\n      break;\r\n    case actionType.StateMerging:\r\n      draft.merged = draft.current;\r\n  }\r\n});\r\n\r\nexport const useDisplay = ({ width, height, move }) => {\r\n  const emptyRow = useMemo(() => Array(width).fill(tileFill.None), [width]);\r\n  const emptyState = useMemo(() => Array(height).fill(emptyRow), [emptyRow, height]);\r\n\r\n  const initialState = { current: emptyState, merged: emptyState, sweptRowsCount: 0 };\r\n\r\n  const [{ current, merged, sweptRowsCount }, dispatch] = useReducer(reducer, initialState);\r\n  const { matrix, position, randomize, makeMove } = useTetromino({ width });\r\n\r\n  const detectCollision = ({ tetrominoState = matrix, offset = { rowAddress: 0, colAddress: 0 } } = {}) =>\r\n    tetrominoState.some((row, rowAddress) => row.some((tile, colAddress) => {\r\n      const rowAddressAhead = rowAddress + position.rowAddress + offset.rowAddress;\r\n      const colAddressAhead = colAddress + position.colAddress + offset.colAddress;\r\n\r\n      return !isEmptyTile(tile) && (!isEmptyTile(merged[rowAddressAhead]?.[colAddressAhead])\r\n        || rowAddressAhead >= height || colAddressAhead >= width || colAddressAhead < 0\r\n      );\r\n    }));\r\n\r\n  useEffect(() => {\r\n    randomize();\r\n  }, [merged]);\r\n\r\n  useEffect(() => {\r\n    dispatch(detectCollision()\r\n      ? { type: actionType.Reset, payload: initialState }\r\n      : { type: actionType.TetrominoDrawing, payload: { matrix, position } }\r\n    );\r\n  }, [matrix, position]);\r\n\r\n  useDidUpdate(() => {\r\n    const willCollide = detectCollision(move.isRotation ? { tetrominoState: getRotatedMatrix(matrix) } : move);\r\n\r\n    if (willCollide && move.isDown) {\r\n      const filledRowsAddresses = current.reduce((ac, row, rowAddress) => {\r\n        !row.some(isEmptyTile) && ac.push(rowAddress);\r\n\r\n        return ac;\r\n      }, []);\r\n\r\n      dispatch(filledRowsAddresses.length\r\n        ? { type: actionType.FilledRowsSweep, payload: { filledRowsAddresses, emptyRow } }\r\n        : { type: actionType.StateMerging }\r\n      );\r\n    } else if (!willCollide) makeMove(move);\r\n  }, move);\r\n\r\n  return { sweptRowsCount, display: current };\r\n};\r\n","import { useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { matrices } from 'const';\r\n\r\nimport { getRotatedMatrix } from 'utils';\r\n\r\nconst actionType = {\r\n  Randomization: 'randomization',\r\n  Rotation: 'rotation',\r\n  Move: 'move',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.Randomization:\r\n      draft.matrix = matrices[Math.random() * matrices.length | 0];\r\n      draft.position = { rowAddress: 0, colAddress: (payload - draft.matrix.length) / 2 | 0 };\r\n\r\n      break;\r\n    case actionType.Move:\r\n      const { rowAddress, colAddress } = payload;\r\n\r\n      draft.position = produce(draft.position, dr => {\r\n        dr.rowAddress += rowAddress;\r\n        dr.colAddress += colAddress;\r\n      });\r\n\r\n      break;\r\n    case actionType.Rotation:\r\n      draft.matrix = getRotatedMatrix(draft.matrix);\r\n  }\r\n});\r\n\r\nexport const useTetromino = ({ width }) => {\r\n  const [{ matrix, position }, dispatch] = useReducer(reducer, {\r\n    matrix: [],\r\n    position: { rowAddress: 0, colAddress: 0 },\r\n  });\r\n\r\n  const randomize = () => {\r\n    dispatch({ type: actionType.Randomization, payload: width });\r\n  };\r\n\r\n  const makeMove = ({ isRotation, offset }) => {\r\n    dispatch(isRotation ? { type: actionType.Rotation } : { type: actionType.Move, payload: offset });\r\n  };\r\n\r\n  return { matrix, position, randomize, makeMove };\r\n};\r\n","import React, { useEffect, useRef, useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { useDisplay, useDidUpdate, useInterval } from 'hooks';\r\n\r\nimport { keyCode as code } from 'const';\r\n\r\nimport { Display } from '..';\r\n\r\nimport './Tetris.scss';\r\n\r\nconst actionType = {\r\n  LeftMove: 'left-move',\r\n  Rotation: 'rotation',\r\n  RightMove: 'right-move',\r\n  DownMove: 'down-move',\r\n  AutoDropEnabling: 'auto-drop-enabling',\r\n  ScoreUpdate: 'score-update',\r\n  AutoDrop: 'auto-drop',\r\n};\r\n\r\nconst downMove = { isDown: true, offset: { rowAddress: 1, colAddress: 0 } };\r\n\r\nconst reducer = (state, { type, payload }) => produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.LeftMove:\r\n      draft.move = { offset: { rowAddress: 0, colAddress: -1 } };\r\n\r\n      break;\r\n    case actionType.Rotation:\r\n      draft.move = { isRotation: true };\r\n\r\n      break;\r\n    case actionType.RightMove:\r\n      draft.move = { offset: { rowAddress: 0, colAddress: 1 } };\r\n\r\n      break;\r\n    case actionType.DownMove:\r\n      draft.isAutoDrop = false;\r\n      draft.move = { ...downMove };\r\n\r\n      break;\r\n    case actionType.AutoDropEnabling:\r\n      draft.isAutoDrop = true;\r\n\r\n      break;\r\n    case actionType.ScoreUpdate:\r\n      draft.score = payload ? draft.score + payload * 10 : 0;\r\n\r\n      break;\r\n    case actionType.AutoDrop:\r\n      draft.move = { ...downMove };\r\n  }\r\n});\r\n\r\nexport const Tetris = ({ width, height }) => {\r\n  const [{ score, move, isAutoDrop }, dispatch] = useReducer(reducer, { score: 0, move: null, isAutoDrop: true });\r\n  const { display, sweptRowsCount } = useDisplay({ width, height, move });\r\n  const container = useRef();\r\n\r\n  const handleKeyDown = ({ keyCode }) => {\r\n    keyCode === code.ArrowLeft && dispatch({ type: actionType.LeftMove });\r\n    keyCode === code.ArrowUp && dispatch({ type: actionType.Rotation });\r\n    keyCode === code.ArrowRight && dispatch({ type: actionType.RightMove });\r\n    keyCode === code.ArrowDown && dispatch({ type: actionType.DownMove });\r\n  };\r\n\r\n  const handleKeyUp = ({ keyCode }) => {\r\n    keyCode === code.ArrowDown && dispatch({ type: actionType.AutoDropEnabling });\r\n  };\r\n\r\n  useEffect(() => {\r\n    container.current.focus();\r\n  }, []);\r\n\r\n  useDidUpdate(() => {\r\n    dispatch({ type: actionType.ScoreUpdate, payload: sweptRowsCount });\r\n  }, sweptRowsCount);\r\n\r\n  useInterval(() => {\r\n    dispatch({ type: actionType.AutoDrop });\r\n  }, isAutoDrop ? 800 : null);\r\n\r\n  return <div className='tetris' tabIndex='0' onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} ref={container}>\r\n    <div className='score'>{score}</div>\r\n    <Display state={display} width={width} />\r\n  </div>;\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nimport { tileFill } from 'const';\r\n\r\nimport './Tile.scss';\r\n\r\nexport const Tile = memo(({ state }) => {\r\n  let className = 'tile tile__';\r\n\r\n  switch (state) {\r\n    case tileFill.None:\r\n      className = 'tile';\r\n\r\n      break;\r\n    case tileFill.I:\r\n      className += 'i';\r\n\r\n      break;\r\n    case tileFill.J:\r\n      className += 'j'\r\n\r\n      break;\r\n    case tileFill.L:\r\n      className += 'l';\r\n\r\n      break;\r\n    case tileFill.O:\r\n      className += 'o';\r\n\r\n      break;\r\n    case tileFill.S:\r\n      className += 's';\r\n\r\n      break;\r\n    case tileFill.T:\r\n      className += 't';\r\n\r\n      break;\r\n    case tileFill.Z:\r\n      className += 'z';\r\n\r\n      break;\r\n    default:\r\n      throw new Error(`Unexpected tile of \"${state}\"!`);\r\n  }\r\n\r\n  return <div className={className} />;\r\n});\r\n","import React from 'react';\r\n\r\nimport { Header, Tetris, Footer } from 'components';\r\n\r\nexport const App = () => <>\r\n  <Header />\r\n  <Tetris width={10} height={20} />\r\n  <Footer />\r\n</>;\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub);\r\n};\r\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport 'index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}