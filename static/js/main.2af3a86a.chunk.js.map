{"version":3,"sources":["components/Display/Display.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/key-code.js","const/move-code.js","view-models/position.js","const/move-offset.js","const/tile-fill.js","view-models/tile.js","decorators/clone.js","view-models/tetromino.js","const/tetrominos.js","view-models/move.js","hooks/use-tetromino.js","components/Tetris/Tetris.js","hooks/use-tetris.js","hooks/use-interval.js","components/Tile/Tile.js","App.js","setupIcons.js","index.js"],"names":["Display","state","width","className","style","gridTemplateColumns","map","row","rowAddress","tile","colAddress","key","Footer","href","target","rel","icon","Date","getFullYear","Header","useDidUpdate","fn","fnRef","useRef","didMount","useEffect","current","deps","keyCode","moveCode","Position","immerable","this","moveOffset","Left","Right","Down","tileFill","TileVM","fill","clone","propName","descriptor","value","args","cloneDeep","apply","Tetromino","matrix","id","uuid","position","produce","draft","forEach","_","col","reverse","length","tetrominos","Move","code","_id","_code","LeftMove","offset","RotationMove","RightMove","DownMove","useTetromino","getRandomTetromino","item","Math","random","move","useState","tetromino","setTetromino","randomize","makeMove","isRotation","rotate","Tetris","intervalDelay","setIntervalDelay","score","setScore","setMove","height","emptyRow","useMemo","Array","emptyState","setState","mergedState","setMergedState","sweptRowsCount","setSweptRowsCount","detectCollision","some","isEmpty","rowAddressAhead","colAddressAhead","isDown","filledRowsAddresses","reduce","acc","push","address","splice","unshift","count","useTetris","container","drop","focus","prevScore","delay","intervalId","setInterval","clearInterval","useInterval","tabIndex","onKeyDown","onKeyUp","ref","Tile","memo","Error","App","library","add","faGithub","render","document","getElementById"],"mappings":"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","file":"static/js/main.2af3a86a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Tile } from '..';\r\n\r\nimport './Display.scss';\r\n\r\nexport const Display = ({ state, width }) => (\r\n  <div className='display' style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}>\r\n    {state.map((row, rowAddress) =>\r\n      row.map((tile, colAddress) => <Tile key={colAddress * width + rowAddress} state={tile} />)\r\n    )}\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => (\r\n  <footer>\r\n    <span>\r\n      Powered by\r\n      <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;<span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <span className='title'>Tetris</span>\r\n\r\n    <a href='https://github.com/FakeMetalFan/tetris' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const fnRef = useRef();\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn]);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fnRef.current();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n","export const keyCode = {\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n};\r\n","export const moveCode = {\r\n  Left: 1,\r\n  Rotation: 2,\r\n  Right: 3,\r\n  Down: 4,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nexport class Position {\r\n  [immerable] = true;\r\n\r\n  rowAddress;\r\n  colAddress;\r\n\r\n  constructor(\r\n    rowAddress = 0,\r\n    colAddress = 0\r\n  ) {\r\n    this.rowAddress = rowAddress;\r\n    this.colAddress = colAddress;\r\n  }\r\n}\r\n","import { Position } from 'view-models/position' // to avoid circular dependency;\r\n\r\nexport const moveOffset = {\r\n  Left: new Position(0, -1),\r\n  Right: new Position(0, 1),\r\n  Down: new Position(1),\r\n};\r\n","export const tileFill = {\r\n  None: 0,\r\n  I: 1,\r\n  J: 2,\r\n  L: 3,\r\n  O: 4,\r\n  S: 5,\r\n  T: 6,\r\n  Z: 7,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { tileFill } from 'const/tile-fill'; // to avoid circular dependency;\r\n\r\nexport class TileVM {\r\n  [immerable] = true;\r\n\r\n  fill;\r\n\r\n  constructor(\r\n    fill = tileFill.None\r\n  ) {\r\n    this.fill = fill;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.fill === tileFill.None;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash/cloneDeep';\r\n\r\nexport const clone = (target, propName, descriptor) => {\r\n  const { value: fn } = descriptor;\r\n\r\n  descriptor.value = function(...args) {\r\n    return cloneDeep(fn.apply(this, args));\r\n  };\r\n\r\n  return descriptor;\r\n};\r\n","import produce from 'immer';\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { clone } from 'decorators/clone';\r\n\r\nimport { Position } from './position';\r\n\r\nexport class Tetromino {\r\n  id = uuid(); // to always detect a new tetromino;\r\n  position = new Position;\r\n\r\n  matrix;\r\n\r\n  constructor(\r\n    matrix\r\n  ) {\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  @clone\r\n  clone() {\r\n    this.id = uuid();\r\n\r\n    return this;\r\n  }\r\n\r\n  @clone\r\n  move({ rowAddress = 0, colAddress = 0 }) {\r\n    this.position = produce(this.position, draft => {\r\n      draft.rowAddress += rowAddress;\r\n      draft.colAddress += colAddress;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  @clone\r\n  rotate() {\r\n    this.matrix = produce(this.matrix, draft => {\r\n      draft.forEach((_, rowAddress) => {\r\n        draft[rowAddress] = this.matrix.map(col => col[rowAddress]);\r\n      });\r\n\r\n      draft.map(row => row.reverse());\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  get width() {\r\n    return this.matrix.length;\r\n  }\r\n\r\n  get rowAddress() {\r\n    return this.position.rowAddress;\r\n  }\r\n\r\n  get colAddress() {\r\n    return this.position.colAddress;\r\n  }\r\n}\r\n","import { TileVM } from 'view-models/tile'; // to avoid circular dependency;\r\nimport { Tetromino } from 'view-models/tetromino'; // to avoid circular dependency;\r\n\r\nimport { tileFill } from './tile-fill';\r\n\r\nexport const tetrominos = [\r\n  new Tetromino([\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n    [new TileVM, new TileVM(tileFill.I), new TileVM, new TileVM],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM, new TileVM(tileFill.J), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.J), new TileVM],\r\n    [new TileVM(tileFill.J), new TileVM(tileFill.J), new TileVM],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM, new TileVM(tileFill.L), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.L), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.L), new TileVM(tileFill.L)],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM, new TileVM(tileFill.S), new TileVM(tileFill.S)],\r\n    [new TileVM(tileFill.S), new TileVM(tileFill.S), new TileVM],\r\n    [new TileVM, new TileVM, new TileVM],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM, new TileVM(tileFill.T), new TileVM],\r\n    [new TileVM(tileFill.T), new TileVM(tileFill.T), new TileVM(tileFill.T)],\r\n    [new TileVM, new TileVM, new TileVM],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(tileFill.Z), new TileVM(tileFill.Z), new TileVM],\r\n    [new TileVM, new TileVM(tileFill.Z), new TileVM(tileFill.Z)],\r\n    [new TileVM, new TileVM, new TileVM],\r\n  ]),\r\n];\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { moveCode, moveOffset } from 'const';\r\n\r\nclass Move {\r\n  _id = uuid(); // to always detect a new move;\r\n\r\n  _code;\r\n\r\n  constructor(\r\n    code\r\n  ) {\r\n    this._code = code;\r\n  }\r\n\r\n  get isRotation() {\r\n    return this._code === moveCode.Rotation;\r\n  }\r\n\r\n  get isDown() {\r\n    return this._code === moveCode.Down;\r\n  }\r\n}\r\n\r\nexport class LeftMove extends Move {\r\n  offset = moveOffset.Left;\r\n\r\n  constructor() {\r\n    super(moveCode.Left);\r\n  }\r\n}\r\n\r\nexport class RotationMove extends Move {\r\n  constructor() {\r\n    super(moveCode.Rotation);\r\n  }\r\n}\r\n\r\nexport class RightMove extends Move {\r\n  offset = moveOffset.Right;\r\n\r\n  constructor() {\r\n    super(moveCode.Right);\r\n  }\r\n}\r\n\r\nexport class DownMove extends Move {\r\n  offset = moveOffset.Down;\r\n\r\n  constructor() {\r\n    super(moveCode.Down);\r\n  }\r\n}\r\n","import { useState } from 'react';\r\n\r\nimport { tetrominos } from 'const';\r\n\r\nexport const useTetromino = ({ width }) => {\r\n  const getRandomTetromino = () => {\r\n    const item = tetrominos[Math.random() * tetrominos.length | 0].clone();\r\n\r\n    return item.move({ colAddress: (width - item.width) / 2 | 0 });\r\n  };\r\n\r\n  const [tetromino, setTetromino] = useState(() => getRandomTetromino());\r\n\r\n  const randomize = () => {\r\n    setTetromino(getRandomTetromino());\r\n  };\r\n\r\n  const makeMove = move => {\r\n    setTetromino(move.isRotation ? tetromino.rotate() : tetromino.move(move.offset));\r\n  };\r\n\r\n  return { tetromino, randomize, makeMove };\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport { useTetris, useDidUpdate, useInterval } from 'hooks';\r\n\r\nimport { keyCode } from 'const';\r\n\r\nimport { LeftMove, RotationMove, RightMove, DownMove } from 'view-models';\r\n\r\nimport { Display } from '..';\r\n\r\nimport './Tetris.scss';\r\n\r\nexport const Tetris = () => {\r\n  const width = 10;\r\n  const delay = 800;\r\n\r\n  const [intervalDelay, setIntervalDelay] = useState(delay);\r\n  const [score, setScore] = useState(0);\r\n  const [move, setMove] = useState(null);\r\n\r\n  const { state, sweptRowsCount } = useTetris({ width, move, height: 20 });\r\n\r\n  const container = useRef();\r\n\r\n  const drop = () => {\r\n    setMove(new DownMove);\r\n  };\r\n\r\n  const handleKeyDown = ({ keyCode: code }) => {\r\n    code === keyCode.ArrowLeft && setMove(new LeftMove);\r\n    code === keyCode.ArrowUp && setMove(new RotationMove);\r\n    code === keyCode.ArrowRight && setMove(new RightMove);\r\n\r\n    if (code === keyCode.ArrowDown) {\r\n      setIntervalDelay(null);\r\n      drop();\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = ({ keyCode: code }) => {\r\n    code === keyCode.ArrowDown && setIntervalDelay(delay);\r\n  };\r\n\r\n  useEffect(() => {\r\n    container.current.focus();\r\n  }, []);\r\n\r\n  useDidUpdate(() => {\r\n    setScore(prevScore => sweptRowsCount ? prevScore + sweptRowsCount * 10 : 0);\r\n  }, sweptRowsCount);\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, intervalDelay);\r\n\r\n  return (\r\n    <div className='tetris' tabIndex='0' onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} ref={container}>\r\n      <div className='score'>{score}</div>\r\n      <Display state={state} width={width} />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport some from 'lodash/some';\r\n\r\nimport { Position, TileVM } from 'view-models';\r\n\r\nimport { useDidUpdate, useTetromino } from '.';\r\n\r\nexport const useTetris = ({ width, height, move }) => {\r\n  const emptyRow = useMemo(() => Array(width).fill(new TileVM), [width]);\r\n  const emptyState = useMemo(() => Array(height).fill(emptyRow), [emptyRow, height]);\r\n\r\n  const [state, setState] = useState(emptyState);\r\n  const [mergedState, setMergedState] = useState(state);\r\n  const [sweptRowsCount, setSweptRowsCount] = useState(0);\r\n\r\n  const { tetromino, randomize, makeMove } = useTetromino({ width });\r\n\r\n  const detectCollision = ({ matrix = tetromino.matrix, offset = new Position } = {}) =>\r\n    matrix.some((row, rowAddress) => row.some(({ isEmpty }, colAddress) => {\r\n      const rowAddressAhead = rowAddress + tetromino.rowAddress + offset.rowAddress;\r\n      const colAddressAhead = colAddress + tetromino.colAddress + offset.colAddress;\r\n\r\n      return !isEmpty && (!mergedState[rowAddressAhead]?.[colAddressAhead]?.isEmpty\r\n        || rowAddressAhead >= height || colAddressAhead >= width || colAddressAhead < 0\r\n      );\r\n    }));\r\n\r\n  useEffect(() => {\r\n    setState(produce(mergedState, draft => {\r\n      tetromino.matrix.forEach((row, rowAddress) => {\r\n        row.forEach((tile, colAddress) => {\r\n          !tile.isEmpty && (draft[rowAddress + tetromino.rowAddress][colAddress + tetromino.colAddress] = tile);\r\n        });\r\n      });\r\n    }));\r\n  }, [tetromino.matrix, tetromino.position]);\r\n\r\n  useDidUpdate(() => {\r\n    if (detectCollision(move.isRotation ? tetromino.clone().rotate() : move)) {\r\n      if (!move.isDown) return;\r\n\r\n      const filledRowsAddresses = state.reduce((acc, row, rowAddress) => {\r\n        !some(row, 'isEmpty') && acc.push(rowAddress);\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      if (filledRowsAddresses.length) {\r\n        setMergedState(produce(state, draft => {\r\n          filledRowsAddresses.forEach(address => {\r\n            draft.splice(address, 1);\r\n            draft.unshift(emptyRow);\r\n          });\r\n        }));\r\n        setSweptRowsCount(count => count + filledRowsAddresses.length);\r\n      } else setMergedState(state);\r\n    } else makeMove(move);\r\n  }, move);\r\n\r\n  useDidUpdate(() => {\r\n    randomize();\r\n  }, mergedState);\r\n\r\n  useDidUpdate(() => {\r\n    if (detectCollision()) {\r\n      setState(emptyState);\r\n      setMergedState(emptyState);\r\n      setSweptRowsCount(0);\r\n    }\r\n  }, tetromino.id);\r\n\r\n  return { state, sweptRowsCount };\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nimport { tileFill } from 'const';\r\n\r\nimport './Tile.scss';\r\n\r\nexport const Tile = memo(({ state: { fill } }) => {\r\n  let className = 'tile tile__';\r\n\r\n  switch (fill) {\r\n    case tileFill.None:\r\n      className += 'none';\r\n      break;\r\n    case tileFill.I:\r\n      className += 'i';\r\n      break;\r\n    case tileFill.J:\r\n      className += 'j'\r\n      break;\r\n    case tileFill.L:\r\n      className += 'l';\r\n      break;\r\n    case tileFill.O:\r\n      className += 'o';\r\n      break;\r\n    case tileFill.S:\r\n      className += 's';\r\n      break;\r\n    case tileFill.T:\r\n      className += 't';\r\n      break;\r\n    case tileFill.Z:\r\n      className += 'z';\r\n      break;\r\n    default:\r\n      throw new Error(`Unexpected tile fill of \"${fill}\"!`);\r\n  }\r\n\r\n  return (<div className={className} />);\r\n});\r\n","import React from 'react';\n\nimport { Header, Tetris, Footer } from 'components';\n\nexport const App = () => (\n  <>\n    <Header />\n    <Tetris />\n    <Footer />\n  </>\n);\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub);\r\n};\r\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport 'index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}