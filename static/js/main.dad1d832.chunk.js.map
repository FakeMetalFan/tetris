{"version":3,"sources":["components/Display/Display.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/key-code.js","const/move-code.js","const/tile-fill.js","view-models/tile.js","decorators/clone.js","view-models/internals/move-base.js","view-models/internals/position.js","view-models/tetromino.js","const/tetromino-map.js","const/rotation-direction.js","const/move-offset.js","view-models/move.js","hooks/use-safe-ref.js","hooks/use-tetromino.js","components/Tetris/Tetris.js","hooks/use-display.js","hooks/use-interval.js","utils/tile-class-name.js","components/Tile/Tile.js","App.js","setupIcons.js","index.js"],"names":["Display","state","columnsCount","className","style","gridTemplateColumns","map","row","rowAddress","tile","tileAddress","key","Footer","href","target","rel","icon","Date","getFullYear","Header","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","keyCode","moveCode","tileFill","TileVM","fill","immerable","this","clone","_","descriptor","value","args","cloneDeep","apply","Move","code","_id","uuid","_code","Position","colAddress","Tetromino","matrix","id","position","produce","draft","direction","forEach","col","rotationDirection","Clockwise","reverse","length","tetrominoMap","Map","set","Counterclockwise","moveOffset","LeftMove","offset","RightMove","RotationMove","DownMove","useSafeRef","initialValue","ref","setRef","useCallback","next","useTetromino","width","getRandomTetromino","keys","item","get","Math","random","getCloned","useState","tetromino","setTetromino","randomize","makeMove","move","isRotation","getRotated","getMoved","Tetris","intervalDelay","setIntervalDelay","score","setScore","setMove","height","emptyRow","useMemo","Array","emptyDisplay","display","setDisplay","sweptRowsCount","setSweptRowsCount","mergedDisplay","setMergedDisplay","didCollide","some","isEmpty","targetRowAddress","targetColAddress","isDown","getOppositeMove","filledRowsAddresses","reduce","acc","push","address","splice","unshift","count","useDisplay","container","drop","focus","prevScore","delay","fnRef","intervalId","setInterval","clearInterval","useInterval","tabIndex","onKeyDown","onKeyUp","getTileClassName","prefix","Error","Tile","memo","App","library","add","faGithub","render","document","getElementById"],"mappings":"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","file":"static/js/main.dad1d832.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Tile } from '..';\r\n\r\nimport './Display.scss';\r\n\r\nexport const Display = ({ state, columnsCount }) => (\r\n  <div className='display' style={{gridTemplateColumns: `repeat(${columnsCount}, 1fr)`}}>\r\n    {state.map((row, rowAddress) =>\r\n      row.map((tile, tileAddress) => <Tile key={tileAddress * columnsCount + rowAddress} state={tile} />)\r\n    )}\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => (\r\n  <footer>\r\n    <span>\r\n      Powered by\r\n      <a className='icon' href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;<span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n","\r\nimport React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <span className='title'>Tetris</span>\r\n\r\n    <a className='icon' href='https://github.com/FakeMetalFan/tetris' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fn();\r\n    else didMount.current = true;\r\n    // eslint-disable-next-line\r\n  }, deps);\r\n};\r\n","export const keyCode = {\r\n  Space: 32,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n};\r\n","export const moveCode = {\r\n  Left: 1,\r\n  Rotation: 2,\r\n  Right: 3,\r\n  Down: 4,\r\n};\r\n","export const tileFill = { // should not contain \"0\" to avoid some nasty logical operators issues;\r\n  None: -1,\r\n  I: 1,\r\n  J: 2,\r\n  L: 3,\r\n  O: 4,\r\n  S: 5,\r\n  T: 6,\r\n  Z: 7,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { tileFill } from 'const/tile-fill'; // to avoid circular dependency;\r\n\r\nexport class TileVM {\r\n  [immerable] = true;\r\n\r\n  constructor(\r\n    fill = tileFill.None\r\n  ) {\r\n    this.fill = fill;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.fill === tileFill.None;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash/cloneDeep';\r\n\r\nexport const clone = (target, _, descriptor) => {\r\n  const { value: fn } = descriptor;\r\n\r\n  descriptor.value = function(...args) {\r\n    return cloneDeep(fn.apply(this, args));\r\n  };\r\n\r\n  return descriptor;\r\n};\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { moveCode } from 'const';\r\n\r\nexport class Move {\r\n  _id = uuid(); // to always detect a new move;\r\n\r\n  _code;\r\n\r\n  constructor(\r\n    code\r\n  ) {\r\n    this._code = code;\r\n  }\r\n\r\n  get isRotation() {\r\n    return this._code === moveCode.Rotation;\r\n  }\r\n\r\n  get isDown() {\r\n    return this._code === moveCode.Down;\r\n  }\r\n}\r\n","import { immerable } from 'immer';\r\n\r\nexport class Position {\r\n  [immerable] = true;\r\n\r\n  rowAddress;\r\n  colAddress;\r\n\r\n  constructor(\r\n    rowAddress = 0,\r\n    colAddress = 0\r\n  ) {\r\n    this.rowAddress = rowAddress;\r\n    this.colAddress = colAddress;\r\n  }\r\n}\r\n","import produce from 'immer';\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { rotationDirection } from 'const';\r\n\r\nimport { clone } from 'decorators/clone';\r\n\r\nimport { Position } from './internals';\r\n\r\nexport class Tetromino {\r\n  id = uuid(); // to always detect a new piece;\r\n  position = new Position();\r\n\r\n  matrix;\r\n\r\n  constructor(\r\n    matrix\r\n  ) {\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  @clone\r\n  getCloned(colAddress) {\r\n    this.id = uuid();\r\n    this.position = new Position(0, colAddress);\r\n\r\n    return this;\r\n  }\r\n\r\n  @clone\r\n  getMoved({ rowAddress = 0, colAddress = 0 }) {\r\n    this.position = produce(this.position, draft => {\r\n      draft.rowAddress += rowAddress;\r\n      draft.colAddress += colAddress;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  @clone\r\n  getRotated(direction) {\r\n    this.matrix = produce(this.matrix, draft => {\r\n      draft.forEach((_, rowAddress) => {\r\n        draft[rowAddress] = this.matrix.map(col => col[rowAddress]);\r\n      });\r\n\r\n      if (direction === rotationDirection.Clockwise) draft.map(row => row.reverse());\r\n      else draft.reverse();\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  get width() {\r\n    return this.matrix.length;\r\n  }\r\n\r\n  get rowAddress() {\r\n    return this.position.rowAddress;\r\n  }\r\n\r\n  get colAddress() {\r\n    return this.position.colAddress;\r\n  }\r\n}\r\n","import { TileVM } from 'view-models/tile'; // to avoid circular dependency;\r\nimport { Tetromino } from 'view-models/tetromino'; // to avoid circular dependency;\r\n\r\nimport { tileFill } from './tile-fill';\r\n\r\nexport const tetrominoMap = new Map()\r\n  .set('I', new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n  ]))\r\n  .set('J', new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.J), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.J), new TileVM()],\r\n    [new TileVM(tileFill.J), new TileVM(tileFill.J), new TileVM()],\r\n  ]))\r\n  .set('L', new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.L), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.L), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.L), new TileVM(tileFill.L)],\r\n  ]))\r\n  .set('O', new Tetromino([\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n  ]))\r\n  .set('S', new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.S), new TileVM(tileFill.S)],\r\n    [new TileVM(tileFill.S), new TileVM(tileFill.S), new TileVM()],\r\n    [new TileVM(), new TileVM(), new TileVM()],\r\n  ]))\r\n  .set('T', new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.T), new TileVM()],\r\n    [new TileVM(tileFill.T), new TileVM(tileFill.T), new TileVM(tileFill.T)],\r\n    [new TileVM(), new TileVM(), new TileVM()],\r\n  ]))\r\n  .set('Z', new Tetromino([\r\n    [new TileVM(tileFill.Z), new TileVM(tileFill.Z), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.Z), new TileVM(tileFill.Z)],\r\n    [new TileVM(), new TileVM(), new TileVM()],\r\n  ]));\r\n","export const rotationDirection = {\r\n  Clockwise: 1,\r\n  Counterclockwise: -1,\r\n};\r\n","export const moveOffset = {\r\n  Left: { colAddress: -1 },\r\n  Right: { colAddress: 1 },\r\n  Down: { rowAddress: 1 },\r\n};\r\n","import { moveCode, moveOffset, rotationDirection } from 'const';\r\n\r\nimport { Move } from './internals';\r\n\r\nexport class LeftMove extends Move {\r\n  offset = moveOffset.Left;\r\n\r\n  constructor() {\r\n    super(moveCode.Left);\r\n  }\r\n\r\n  getOppositeMove() {\r\n    return new RightMove();\r\n  }\r\n}\r\n\r\nexport class RotationMove extends Move {\r\n  constructor(\r\n    direction = rotationDirection.Clockwise\r\n  ) {\r\n    super(moveCode.Rotation);\r\n\r\n    this.direction = direction;\r\n  }\r\n\r\n  getOppositeMove() {\r\n    return new RotationMove(\r\n      rotationDirection[this.direction === rotationDirection.Clockwise ? 'Counterclockwise' : 'Clockwise']\r\n    );\r\n  }\r\n}\r\n\r\nexport class RightMove extends Move {\r\n  offset = moveOffset.Right;\r\n\r\n  constructor() {\r\n    super(moveCode.Right);\r\n  }\r\n\r\n  getOppositeMove() {\r\n    return new LeftMove();\r\n  }\r\n}\r\n\r\nexport class DownMove extends Move {\r\n  offset = moveOffset.Down;\r\n\r\n  constructor() {\r\n    super(moveCode.Down);\r\n  }\r\n}\r\n","import { useCallback, useRef } from 'react';\r\n\r\nexport const useSafeRef = initialValue => {\r\n  const ref = useRef(initialValue);\r\n  const setRef = useCallback(next => {\r\n    ref.current = next;\r\n  }, []);\r\n\r\n  return [ref.current, setRef];\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { tetrominoMap } from 'const';\r\n\r\nexport const useTetromino = ({ width }) => {\r\n  const getRandomTetromino = () => {\r\n    const keys = [...tetrominoMap.keys()];\r\n    const item = tetrominoMap.get(keys[Math.random() * keys.length | 0]);\r\n\r\n    return item.getCloned((width - item.width) / 2 | 0);\r\n  };\r\n\r\n  const [tetromino, setTetromino] = useState(() => getRandomTetromino());\r\n\r\n  const randomize = () => {\r\n    setTetromino(getRandomTetromino());\r\n  };\r\n\r\n  const makeMove = move => {\r\n    setTetromino(move.isRotation ? tetromino.getRotated(move.direction) : tetromino.getMoved(move.offset));\r\n  };\r\n\r\n  return { tetromino, randomize, makeMove };\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport { useDidUpdate, useDisplay, useInterval } from 'hooks';\r\n\r\nimport { keyCode } from 'const';\r\n\r\nimport { LeftMove, RotationMove, RightMove, DownMove } from 'view-models';\r\n\r\nimport { Display } from '..';\r\n\r\nimport './Tetris.scss';\r\n\r\nexport const Tetris = () => {\r\n  const width = 10;\r\n  const delay = 800;\r\n\r\n  const [intervalDelay, setIntervalDelay] = useState(delay);\r\n  const [score, setScore] = useState(0);\r\n  const [move, setMove] = useState(null);\r\n\r\n  const { display, sweptRowsCount } = useDisplay({ width, move, height: 20 });\r\n\r\n  const container = useRef();\r\n\r\n  const drop = () => {\r\n    setMove(new DownMove());\r\n  };\r\n\r\n  const handleKeyDown = ({ keyCode: code }) => {\r\n    code === keyCode.ArrowLeft && setMove(new LeftMove());\r\n    code === keyCode.ArrowUp && setMove(new RotationMove());\r\n    code === keyCode.ArrowRight && setMove(new RightMove());\r\n\r\n    if (code === keyCode.ArrowDown) {\r\n      setIntervalDelay(null);\r\n      drop();\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = ({ keyCode: code }) => {\r\n    code === keyCode.ArrowDown && setIntervalDelay(delay);\r\n  };\r\n\r\n  useEffect(() => {\r\n    container.current.focus();\r\n  }, []);\r\n\r\n  useDidUpdate(() => {\r\n    setScore(prevScore => sweptRowsCount ? prevScore + sweptRowsCount * 10 : 0);\r\n  }, sweptRowsCount);\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, intervalDelay);\r\n\r\n  return (\r\n    <div className='tetris' tabIndex='0' onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} ref={container}>\r\n      <div className='score'>{score}</div>\r\n      <Display state={display} columnsCount={width} />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport some from 'lodash/some';\r\n\r\nimport { TileVM } from 'view-models';\r\n\r\nimport { useDidUpdate, useTetromino, useSafeRef } from '.';\r\n\r\nexport const useDisplay = ({ width, height, move }) => {\r\n  const emptyRow = useMemo(() => Array(width).fill(new TileVM()), [width]);\r\n  const emptyDisplay = useMemo(() => Array(height).fill(emptyRow), [emptyRow, height]);\r\n\r\n  const [display, setDisplay] = useState(emptyDisplay);\r\n  const [sweptRowsCount, setSweptRowsCount] = useState(0);\r\n\r\n  const { tetromino, randomize, makeMove } = useTetromino({ width });\r\n\r\n  const [mergedDisplay, setMergedDisplay] = useSafeRef(display); // to recreate state when a new tetromino is drawn;\r\n\r\n  const didCollide = () => tetromino.matrix.some((row, rowAddress) => row.some(({ isEmpty }, colAddress) => {\r\n    const targetRowAddress = rowAddress + tetromino.rowAddress;\r\n    const targetColAddress = colAddress + tetromino.colAddress;\r\n\r\n    return !isEmpty && (!mergedDisplay[targetRowAddress]?.[targetColAddress]?.isEmpty // filled tile;\r\n      || targetRowAddress >= height // floor;\r\n      || (targetColAddress >= width || targetColAddress < 0) // walls;\r\n    );\r\n  }));\r\n\r\n  useEffect(() => { // drawing;\r\n    if (didCollide())\r\n      if (move.isDown) setMergedDisplay(display);\r\n      else makeMove(move.getOppositeMove());\r\n    else setDisplay(produce(mergedDisplay, draft => {\r\n      tetromino.matrix.forEach((row, rowAddress) => {\r\n        row.forEach((tile, colAddress) => {\r\n          !tile.isEmpty && (draft[rowAddress + tetromino.rowAddress][colAddress + tetromino.colAddress] = tile);\r\n        });\r\n      });\r\n    }));\r\n    // eslint-disable-next-line\r\n  }, [tetromino.matrix, tetromino.position]);\r\n\r\n  useDidUpdate(() => {\r\n    makeMove(move);\r\n  }, move);\r\n\r\n  useDidUpdate(() => {\r\n    randomize();\r\n  }, mergedDisplay);\r\n\r\n  useDidUpdate(() => { // filled rows sweep;\r\n    const filledRowsAddresses = mergedDisplay.reduce((acc, row, rowAddress) => {\r\n      !some(row, 'isEmpty') && acc.push(rowAddress);\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n    if (filledRowsAddresses.length) {\r\n      setMergedDisplay(produce(mergedDisplay, draft => {\r\n        filledRowsAddresses.forEach(address => {\r\n          draft.splice(address, 1);\r\n          draft.unshift(emptyRow);\r\n        });\r\n      }));\r\n      setSweptRowsCount(count => count + filledRowsAddresses.length);\r\n    }\r\n  }, mergedDisplay);\r\n\r\n  useDidUpdate(() => { // game over, reset;\r\n    if (didCollide()) {\r\n      setDisplay(emptyDisplay);\r\n      setMergedDisplay(emptyDisplay);\r\n      setSweptRowsCount(0);\r\n    }\r\n  }, tetromino.id);\r\n\r\n  return { display, sweptRowsCount };\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import { tileFill } from 'const';\r\n\r\nexport const getTileClassName = fill => {\r\n  const prefix = 'tile tile__';\r\n\r\n  switch (fill) {\r\n    case tileFill.None:\r\n      return `${prefix}none`;\r\n    case tileFill.I:\r\n      return `${prefix}i`;\r\n    case tileFill.J:\r\n      return `${prefix}j`;\r\n    case tileFill.L:\r\n      return `${prefix}l`;\r\n    case tileFill.O:\r\n      return `${prefix}o`;\r\n    case tileFill.S:\r\n      return `${prefix}s`;\r\n    case tileFill.T:\r\n      return `${prefix}t`;\r\n    case tileFill.Z:\r\n      return `${prefix}z`;\r\n    default:\r\n      throw new Error(`Unexpected tile fill of \"${fill}\"!`);\r\n  }\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nimport { getTileClassName } from 'utils/tile-class-name';\r\n\r\nimport './Tile.scss';\r\n\r\nexport const Tile = memo(({ state }) => (<div className={getTileClassName(state.fill)} />));\r\n","import React from 'react';\n\nimport { Header, Tetris, Footer } from 'components';\n\nexport const App = () => (\n  <>\n    <Header />\n    <Tetris />\n    <Footer />\n  </>\n);\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub);\r\n};\r\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport './index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}