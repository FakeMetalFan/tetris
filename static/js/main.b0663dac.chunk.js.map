{"version":3,"sources":["containers/Tetris/tetris.module.scss","components/Footer/footer.module.scss","constants/tile-fill.ts","components/Counter/index.tsx","components/Footer/index.tsx","components/Header/index.tsx","constants/key-code.ts","utils/fill-checker.ts","components/Tile/index.tsx","constants/move-code.ts","hooks/use-did-mount.ts","utils/add-id.ts","utils/create-move.ts","utils/rotate-matrix.ts","hooks/use-did-update.ts","hooks/use-interval.ts","constants/tetrominos.ts","hooks/use-tetromino.ts","hooks/use-tetris.ts","containers/Tetris/index.tsx","App.tsx","setup-icons.ts","index.tsx","components/Tile/tile.module.scss","components/Header/header.module.scss"],"names":["module","exports","TileFill","Counter","count","memo","Footer","className","styles","footer","link","href","target","rel","icon","Date","getFullYear","Header","header","title","KeyCode","FillChecker","fill","this","Empty","I","J","L","O","S","T","Z","Tile","isI","isJ","isL","isO","isS","isT","isZ","classNames","tile","i","j","l","o","s","t","z","MoveCode","useDidMount","callback","useEffect","addId","item","id","nanoid","createMove","code","Rotation","isRotation","Left","offset","rowIndex","columnIndex","Right","Down","isDown","rotateMatrix","matrix","produce","draft","forEach","_","index","map","row","reverse","useDidUpdate","didMount","useRef","deps","current","useInterval","interval","callbackRef","intervalId","setInterval","call","clearInterval","tetrominos","useTetromino","width","useState","tetromino","setTetromino","position","setPosition","randomize","randomTetromino","Math","floor","random","length","makeMove","useTetris","params","height","emptyTiles","useMemo","Array","from","tiles","setTiles","mergedTiles","setMergedTiles","clearedRowsCount","setClearedRowsCount","score","setScore","move","setMove","isAutoDrop","setIsAutoDrop","willTetrominoCollide","some","rowIndexAhead","columnIndexAhead","isEmpty","willCollide","filledRowsIndexes","reduce","acc","push","Tetris","containerRef","focus","tetris","ref","onClick","event","preventDefault","onKeyDown","keyCode","ArrowUp","ArrowLeft","ArrowRight","ArrowDown","onKeyUp","style","gridTemplateColumns","App","library","add","faGithub","setupIcons","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0663dac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tetris\":\"tetris_tetris__1xn-2\",\"tiles\":\"tetris_tiles__QqxGq\",\"score\":\"tetris_score__XB5WE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__2RxHW\",\"link\":\"footer_link__2KGou\"};","// eslint-disable-next-line no-shadow\nenum TileFill {\n  Empty,\n  I,\n  J,\n  L,\n  O,\n  S,\n  T,\n  Z,\n}\n\nexport default TileFill;\n","import React, { memo } from 'react';\r\n\r\nconst Counter = ({ count }: { count: number }) => <>{count}</>;\r\n\r\nexport default memo(Counter);\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nimport styles from './footer.module.scss';\r\n\r\nconst Footer = () => (\r\n  <footer className={styles.footer}>\r\n    <span>\r\n      Powered by\r\n      <a\r\n        className={styles.link}\r\n        href=\"https://github.com/FakeMetalFan\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;\r\n      <span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n\r\nexport default memo(Footer);\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nimport styles from './header.module.scss';\r\n\r\nconst Header = () => (\r\n  <header className={styles.header}>\r\n    <span className={styles.title}>Tetris</span>\r\n    <a\r\n      className={styles.link}\r\n      href=\"https://github.com/FakeMetalFan/tetris\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n\r\nexport default memo(Header);\r\n","// eslint-disable-next-line no-shadow\r\nenum KeyCode {\r\n  ArrowLeft = 37,\r\n  ArrowUp = 38,\r\n  ArrowRight = 39,\r\n  ArrowDown = 40,\r\n}\r\n\r\nexport default KeyCode;\r\n","import TileFill from 'constants/tile-fill';\r\n\r\nclass FillChecker {\r\n  constructor(private fill: TileFill) {}\r\n\r\n  get isEmpty() {\r\n    return this.fill === TileFill.Empty;\r\n  }\r\n\r\n  get isI() {\r\n    return this.fill === TileFill.I;\r\n  }\r\n\r\n  get isJ() {\r\n    return this.fill === TileFill.J;\r\n  }\r\n\r\n  get isL() {\r\n    return this.fill === TileFill.L;\r\n  }\r\n\r\n  get isO() {\r\n    return this.fill === TileFill.O;\r\n  }\r\n\r\n  get isS() {\r\n    return this.fill === TileFill.S;\r\n  }\r\n\r\n  get isT() {\r\n    return this.fill === TileFill.T;\r\n  }\r\n\r\n  get isZ() {\r\n    return this.fill === TileFill.Z;\r\n  }\r\n}\r\n\r\nexport default FillChecker;\r\n","import classNames from 'classnames';\r\nimport TileFill from 'constants/tile-fill';\r\nimport React, { memo } from 'react';\r\nimport FillChecker from 'utils/fill-checker';\r\n\r\nimport styles from './tile.module.scss';\r\n\r\nconst Tile = ({ fill }: { fill: TileFill }) => {\r\n  const { isI, isJ, isL, isO, isS, isT, isZ } = new FillChecker(fill);\r\n\r\n  return (\r\n    <div\r\n      className={classNames(styles.tile, {\r\n        [styles.i]: isI,\r\n        [styles.j]: isJ,\r\n        [styles.l]: isL,\r\n        [styles.o]: isO,\r\n        [styles.s]: isS,\r\n        [styles.t]: isT,\r\n        [styles.z]: isZ,\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(Tile);\r\n","// eslint-disable-next-line no-shadow\r\nenum MoveCode {\r\n  Rotation,\r\n  Left,\r\n  Right,\r\n  Down,\r\n}\r\n\r\nexport default MoveCode;\r\n","import { useEffect } from 'react';\r\n\r\nconst useDidMount = (callback: () => void) => {\r\n  useEffect(() => {\r\n    callback();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n};\r\n\r\nexport default useDidMount;\r\n","import { nanoid } from 'nanoid';\r\n\r\nconst addId = <T extends Record<string, unknown>>(item: T) => ({\r\n  ...item,\r\n  id: nanoid(),\r\n});\r\n\r\nexport default addId;\r\n","import MoveCode from 'constants/move-code';\r\n\r\nconst createMove = (code?: MoveCode) => {\r\n  switch (code) {\r\n    case MoveCode.Rotation:\r\n      return { isRotation: true };\r\n    case MoveCode.Left:\r\n      return { offset: { rowIndex: 0, columnIndex: -1 } };\r\n    case MoveCode.Right:\r\n      return { offset: { rowIndex: 0, columnIndex: 1 } };\r\n    case MoveCode.Down:\r\n    default:\r\n      return { isDown: true, offset: { rowIndex: 1, columnIndex: 0 } };\r\n  }\r\n};\r\n\r\nexport default createMove;\r\n","import produce, { Draft } from 'immer';\r\n\r\nconst rotateMatrix = <T>(matrix: T[][]) =>\r\n  produce(matrix, (draft) => {\r\n    draft.forEach((_, index) => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      draft[index] = matrix.map((row) => row[index]) as Draft<T[]>;\r\n    });\r\n\r\n    draft.map((row) => row.reverse());\r\n  });\r\n\r\nexport default rotateMatrix;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst useDidUpdate = (callback: () => void, ...deps: unknown[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      callback();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n\r\nexport default useDidUpdate;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Callback = () => void;\r\n\r\nconst useInterval = (callback: Callback, interval?: number | null) => {\r\n  const callbackRef = useRef<Callback>();\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!interval) {\r\n      return undefined;\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      callbackRef.current?.();\r\n    }, interval);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [interval]);\r\n};\r\n\r\nexport default useInterval;\r\n","import TileFill from './tile-fill';\n\nconst tetrominos = [\n  [\n    [TileFill.Empty, TileFill.I, TileFill.Empty, TileFill.Empty],\n    [TileFill.Empty, TileFill.I, TileFill.Empty, TileFill.Empty],\n    [TileFill.Empty, TileFill.I, TileFill.Empty, TileFill.Empty],\n    [TileFill.Empty, TileFill.I, TileFill.Empty, TileFill.Empty],\n  ],\n  [\n    [TileFill.Empty, TileFill.J, TileFill.Empty],\n    [TileFill.Empty, TileFill.J, TileFill.Empty],\n    [TileFill.J, TileFill.J, TileFill.Empty],\n  ],\n  [\n    [TileFill.Empty, TileFill.L, TileFill.Empty],\n    [TileFill.Empty, TileFill.L, TileFill.Empty],\n    [TileFill.Empty, TileFill.L, TileFill.L],\n  ],\n  [\n    [TileFill.O, TileFill.O],\n    [TileFill.O, TileFill.O],\n  ],\n  [\n    [TileFill.Empty, TileFill.S, TileFill.S],\n    [TileFill.S, TileFill.S, TileFill.Empty],\n    [TileFill.Empty, TileFill.Empty, TileFill.Empty],\n  ],\n  [\n    [TileFill.Empty, TileFill.T, TileFill.Empty],\n    [TileFill.T, TileFill.T, TileFill.T],\n    [TileFill.Empty, TileFill.Empty, TileFill.Empty],\n  ],\n  [\n    [TileFill.Z, TileFill.Z, TileFill.Empty],\n    [TileFill.Empty, TileFill.Z, TileFill.Z],\n    [TileFill.Empty, TileFill.Empty, TileFill.Empty],\n  ],\n];\n\nexport default tetrominos;\n","import tetrominos from 'constants/tetrominos';\nimport TileFill from 'constants/tile-fill';\nimport produce from 'immer';\nimport { useState } from 'react';\nimport rotateMatrix from 'utils/rotate-matrix';\n\nconst useTetromino = ({ width }: TetrisParams) => {\n  const [tetromino, setTetromino] = useState<TileFill[][]>([]);\n\n  const [position, setPosition] = useState({ rowIndex: 0, columnIndex: 0 });\n\n  const randomize = () => {\n    const randomTetromino =\n      tetrominos[Math.floor(Math.random() * tetrominos.length)];\n\n    setTetromino(randomTetromino);\n    setPosition({\n      rowIndex: 0,\n      columnIndex: Math.floor((width - randomTetromino.length) / 2),\n    });\n  };\n\n  const makeMove = ({\n    isRotation,\n    offset = { rowIndex: 0, columnIndex: 0 },\n  }: Move) => {\n    if (isRotation) {\n      setTetromino(rotateMatrix(tetromino));\n    } else {\n      setPosition(\n        produce(position, (draft) => {\n          /* eslint-disable no-param-reassign */\n          draft.rowIndex += offset.rowIndex;\n          draft.columnIndex += offset.columnIndex;\n        })\n      );\n    }\n  };\n\n  return { tetromino, position, randomize, makeMove };\n};\n\nexport default useTetromino;\n","import TileFill from 'constants/tile-fill';\r\nimport produce from 'immer';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport addId from 'utils/add-id';\r\nimport createMove from 'utils/create-move';\r\nimport FillChecker from 'utils/fill-checker';\r\nimport rotateMatrix from 'utils/rotate-matrix';\r\n\r\nimport useDidUpdate from './use-did-update';\r\nimport useInterval from './use-interval';\r\nimport useTetromino from './use-tetromino';\r\n\r\nconst useTetris = (params: TetrisParams) => {\r\n  const { width, height } = params;\r\n\r\n  const emptyTiles = useMemo(\r\n    () =>\r\n      Array.from({ length: height }, () =>\r\n        Array.from({ length: width }, () => addId({ fill: TileFill.Empty }))\r\n      ),\r\n    [height, width]\r\n  );\r\n\r\n  const [tiles, setTiles] = useState(emptyTiles);\r\n\r\n  const [mergedTiles, setMergedTiles] = useState(emptyTiles);\r\n\r\n  const [clearedRowsCount, setClearedRowsCount] = useState(0);\r\n\r\n  const [score, setScore] = useState(0);\r\n\r\n  const [move, setMove] = useState<Move>({});\r\n\r\n  const [isAutoDrop, setIsAutoDrop] = useState(true);\r\n\r\n  const { tetromino, position, randomize, makeMove } = useTetromino(params);\r\n\r\n  const willTetrominoCollide = ({\r\n    matrix = tetromino,\r\n    offset = { rowIndex: 0, columnIndex: 0 },\r\n  }: { matrix?: TileFill[][]; offset?: Position } = {}) =>\r\n    matrix.some((row, rowIndex) =>\r\n      row.some((fill, columnIndex) => {\r\n        const rowIndexAhead = rowIndex + position.rowIndex + offset.rowIndex;\r\n        const columnIndexAhead =\r\n          columnIndex + position.columnIndex + offset.columnIndex;\r\n\r\n        return (\r\n          !new FillChecker(fill).isEmpty &&\r\n          (!new FillChecker(\r\n            mergedTiles[rowIndexAhead]?.[columnIndexAhead]?.fill\r\n          ).isEmpty ||\r\n            rowIndexAhead >= height ||\r\n            columnIndexAhead >= width ||\r\n            columnIndexAhead < 0)\r\n        );\r\n      })\r\n    );\r\n\r\n  useEffect(() => {\r\n    randomize();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [mergedTiles]);\r\n\r\n  useDidUpdate(\r\n    () => {\r\n      if (willTetrominoCollide()) {\r\n        setTiles(emptyTiles);\r\n        setMergedTiles(emptyTiles);\r\n        setClearedRowsCount(0);\r\n      } else {\r\n        setTiles(\r\n          produce(mergedTiles, (draft) => {\r\n            tetromino.forEach((row, rowIndex) => {\r\n              row.forEach((fill, columnIndex) => {\r\n                if (!new FillChecker(fill).isEmpty) {\r\n                  /* eslint-disable no-param-reassign */\r\n                  draft[rowIndex + position.rowIndex][\r\n                    columnIndex + position.columnIndex\r\n                  ].fill = fill;\r\n                }\r\n              });\r\n            });\r\n          })\r\n        );\r\n      }\r\n    },\r\n    tetromino,\r\n    position\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    const willCollide = willTetrominoCollide(\r\n      move.isRotation ? { matrix: rotateMatrix(tetromino) } : move\r\n    );\r\n\r\n    if (willCollide && move.isDown) {\r\n      const filledRowsIndexes = tiles.reduce((acc: number[], row, rowIndex) => {\r\n        const hasEmptyTiles = row.some(\r\n          (tile) => new FillChecker(tile.fill).isEmpty\r\n        );\r\n\r\n        if (!hasEmptyTiles) {\r\n          acc.push(rowIndex);\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      const { length } = filledRowsIndexes;\r\n\r\n      if (length) {\r\n        setClearedRowsCount(clearedRowsCount + length);\r\n        setMergedTiles(\r\n          produce(tiles, (draft) => {\r\n            filledRowsIndexes.forEach((index) => {\r\n              for (let rowIndex = index; rowIndex; rowIndex -= 1) {\r\n                draft[rowIndex].forEach((tile, columnIndex) => {\r\n                  tile.fill = draft[rowIndex - 1][columnIndex].fill;\r\n                });\r\n              }\r\n            });\r\n          })\r\n        );\r\n      } else {\r\n        setMergedTiles(tiles);\r\n      }\r\n    } else if (!willCollide) {\r\n      makeMove(move);\r\n    }\r\n  }, move);\r\n\r\n  useDidUpdate(() => {\r\n    setScore(clearedRowsCount ? score + clearedRowsCount * 10 : 0);\r\n  }, clearedRowsCount);\r\n\r\n  useInterval(\r\n    () => {\r\n      setMove(createMove());\r\n    },\r\n    isAutoDrop ? 1e3 : null\r\n  );\r\n\r\n  return { tiles, score, setMove, setIsAutoDrop };\r\n};\r\n\r\nexport default useTetris;\r\n","import Counter from 'components/Counter';\nimport Footer from 'components/Footer';\nimport Header from 'components/Header';\nimport Tile from 'components/Tile';\nimport KeyCode from 'constants/key-code';\nimport MoveCode from 'constants/move-code';\nimport useDidMount from 'hooks/use-did-mount';\nimport useTetris from 'hooks/use-tetris';\nimport React, { KeyboardEvent, SyntheticEvent, useRef } from 'react';\nimport createMove from 'utils/create-move';\n\nimport styles from './tetris.module.scss';\n\nconst Tetris = (params: TetrisParams) => {\n  const { width } = params;\n\n  const containerRef = useRef<HTMLAnchorElement>(null);\n\n  const { tiles, score, setMove, setIsAutoDrop } = useTetris(params);\n\n  const handleClick = (event: SyntheticEvent<HTMLAnchorElement>) => {\n    event.preventDefault();\n  };\n\n  const handleKeyDown = ({ keyCode }: KeyboardEvent) => {\n    switch (keyCode) {\n      case KeyCode.ArrowUp:\n        setMove(createMove(MoveCode.Rotation));\n        break;\n      case KeyCode.ArrowLeft:\n        setMove(createMove(MoveCode.Left));\n        break;\n      case KeyCode.ArrowRight:\n        setMove(createMove(MoveCode.Right));\n        break;\n      case KeyCode.ArrowDown:\n      default:\n        setIsAutoDrop(false);\n        setMove(createMove());\n    }\n  };\n\n  const handleKeyUp = ({ keyCode }: KeyboardEvent) => {\n    if (keyCode === KeyCode.ArrowDown) {\n      setIsAutoDrop(true);\n    }\n  };\n\n  useDidMount(() => {\n    containerRef.current?.focus();\n  });\n\n  return (\n    <>\n      <Header />\n      <main>\n        <a\n          href=\"/\"\n          className={styles.tetris}\n          ref={containerRef}\n          onClick={handleClick}\n          onKeyDown={handleKeyDown}\n          onKeyUp={handleKeyUp}\n        >\n          <div className={styles.score}>\n            <Counter count={score} />\n          </div>\n          <div\n            className={styles.tiles}\n            style={{ gridTemplateColumns: `repeat(${width}, 1fr)` }}\n          >\n            {tiles.map((row) =>\n              row.map(({ fill, id }) => <Tile fill={fill} key={id} />)\n            )}\n          </div>\n        </a>\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nexport default Tetris;\n","import Tetris from 'containers/Tetris';\nimport React from 'react';\n\nconst App = () => <Tetris width={10} height={20} />;\n\nexport default App;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nconst setupIcons = () => {\n  library.add(faGithub);\n};\n\nexport default setupIcons;\n","import 'index.scss';\n\nimport App from 'App';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport setupIcons from 'setup-icons';\n\nsetupIcons();\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"tile_tile__3mwM6\",\"i\":\"tile_i__25_aJ\",\"j\":\"tile_j__TNRBZ\",\"l\":\"tile_l__Zpgje\",\"o\":\"tile_o__2wu3P\",\"s\":\"tile_s__12WnI\",\"t\":\"tile_t__2_6li\",\"z\":\"tile_z__2vgfH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2l8_Z\",\"link\":\"header_link__3G0Uu\"};"],"sourceRoot":""}