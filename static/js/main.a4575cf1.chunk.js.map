{"version":3,"sources":["components/Display/Display.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/key-code.js","const/tile-fill.js","const/matrices.js","utils/rotated-matrix.js","hooks/use-display.js","hooks/use-tetromino.js","view-models/move.js","components/Tetris/Tetris.js","hooks/use-interval.js","components/Tile/Tile.js","App.js","setupIcons.js","index.js"],"names":["Display","state","width","className","style","gridTemplateColumns","map","row","tile","colAddress","key","Footer","href","target","rel","icon","Date","getFullYear","Header","useDidUpdate","fn","fnRef","useRef","didMount","useEffect","current","deps","keyCode","tileFill","matrices","getRotatedMatrix","matrix","produce","draft","forEach","_","rowAddress","reverse","actionType","reducer","type","payload","cloneDeep","merged","dr","position","filledRowsAddresses","emptyRow","sweptRowsCount","length","address","splice","unshift","Math","random","offset","useTetromino","useReducer","dispatch","randomize","makeMove","isRotation","Move","this","Rotation","DownMove","LeftMove","RightMove","move","isAutoDrop","score","Tetris","height","useMemo","Array","fill","emptyState","initialState","detectCollision","tetrominoState","some","rowAddressAhead","colAddressAhead","isDown","reduce","ac","push","display","useDisplay","container","focus","delay","intervalId","setInterval","clearInterval","useInterval","tabIndex","onKeyDown","code","onKeyUp","ref","Tile","memo","Error","App","library","add","faGithub","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4575cf1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Tile } from '..';\r\n\r\nimport './Display.scss';\r\n\r\nexport const Display = ({ state, width }) => <div\r\n  className='display'\r\n  style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\r\n>\r\n  {state.map(row => row.map((tile, colAddress) => <Tile key={colAddress} state={tile} />))}\r\n</div>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => <footer>\r\n  <span>\r\n    Powered by\r\n    <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n    &copy;<span>{new Date().getFullYear()}</span>\r\n  </span>\r\n</footer>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => <header>\r\n  <span className='title'>Tetris</span>\r\n\r\n  <a href='https://github.com/FakeMetalFan/tetris' target='_blank' rel='noopener noreferrer'>\r\n    <FontAwesomeIcon icon={['fab', 'github']} />\r\n  </a>\r\n</header>;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const fnRef = useRef();\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn]);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fnRef.current();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n","export const keyCode = {\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n};\r\n","export const tileFill = {\r\n  None: 0,\r\n  I: 1,\r\n  J: 2,\r\n  L: 3,\r\n  O: 4,\r\n  S: 5,\r\n  T: 6,\r\n  Z: 7,\r\n};\r\n","import { tileFill } from './tile-fill';\r\n\r\nexport const matrices = [\r\n  [\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.J, tileFill.None],\r\n    [tileFill.None, tileFill.J, tileFill.None],\r\n    [tileFill.J, tileFill.J, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.L, tileFill.None],\r\n    [tileFill.None, tileFill.L, tileFill.None],\r\n    [tileFill.None, tileFill.L, tileFill.L],\r\n  ],\r\n  [\r\n    [tileFill.O, tileFill.O],\r\n    [tileFill.O, tileFill.O],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.S, tileFill.S],\r\n    [tileFill.S, tileFill.S, tileFill.None],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.T, tileFill.None],\r\n    [tileFill.T, tileFill.T, tileFill.T],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.Z, tileFill.Z, tileFill.None],\r\n    [tileFill.None, tileFill.Z, tileFill.Z],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n];\r\n","import produce from 'immer';\r\n\r\nexport const getRotatedMatrix = matrix => produce(matrix, draft => {\r\n  draft.forEach((_, rowAddress) => {\r\n    draft[rowAddress] = matrix.map(row => row[rowAddress]);\r\n  });\r\n\r\n  draft.map(row => row.reverse());\r\n});\r\n","import { useEffect, useMemo, useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nimport { tileFill } from 'const';\r\n\r\nimport { getRotatedMatrix } from 'utils/rotated-matrix';\r\n\r\nimport { useDidUpdate, useTetromino } from '.';\r\n\r\nconst actionType = {\r\n  DrawTetromino: 'draw-tetromino',\r\n  SweepFilledRows: 'sweep-filled-rows',\r\n  MergeState: 'merge-state',\r\n  Reset: 'reset',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => type === actionType.Reset ? cloneDeep(payload) : produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.DrawTetromino:\r\n      draft.current = produce(draft.merged, dr => {\r\n        const { matrix, position } = payload;\r\n\r\n        matrix.forEach((row, rowAddress) => {\r\n          row.forEach((tile, colAddress) => {\r\n            tile !== tileFill.None && (dr[rowAddress + position.rowAddress][colAddress + position.colAddress] = tile);\r\n          });\r\n        });\r\n      });\r\n\r\n      break;\r\n    case actionType.SweepFilledRows:\r\n      const { filledRowsAddresses, emptyRow } = payload;\r\n\r\n      draft.sweptRowsCount += filledRowsAddresses.length;\r\n      draft.merged = produce(draft.current, dr => {\r\n        filledRowsAddresses.forEach(address => {\r\n          dr.splice(address, 1);\r\n          dr.unshift(emptyRow);\r\n        });\r\n      });\r\n\r\n      break;\r\n    case actionType.MergeState:\r\n      draft.merged = draft.current;\r\n  }\r\n});\r\n\r\nexport const useDisplay = ({ width, height, move }) => {\r\n  const emptyRow = useMemo(() => Array(width).fill(tileFill.None), [width]);\r\n  const emptyState = useMemo(() => Array(height).fill(emptyRow), [emptyRow, height]);\r\n\r\n  const initialState = { current: emptyState, merged: emptyState, sweptRowsCount: 0 };\r\n\r\n  const [{ current, merged, sweptRowsCount }, dispatch] = useReducer(reducer, initialState);\r\n  const { matrix, position, randomize, makeMove } = useTetromino({ width });\r\n\r\n  const detectCollision = ({ tetrominoState = matrix, offset = { rowAddress: 0, colAddress: 0 } } = {}) =>\r\n    tetrominoState.some((row, rowAddress) => row.some((tile, colAddress) => {\r\n      const rowAddressAhead = rowAddress + position.rowAddress + offset.rowAddress;\r\n      const colAddressAhead = colAddress + position.colAddress + offset.colAddress;\r\n\r\n      return tile !== tileFill.None && (merged[rowAddressAhead]?.[colAddressAhead] !== tileFill.None\r\n        || rowAddressAhead >= height || colAddressAhead >= width || colAddressAhead < 0\r\n      );\r\n    }));\r\n\r\n  useEffect(() => {\r\n    randomize();\r\n  }, [merged]);\r\n\r\n  useEffect(() => {\r\n    dispatch(detectCollision()\r\n      ? { type: actionType.Reset, payload: initialState }\r\n      : { type: actionType.DrawTetromino, payload: { matrix, position } }\r\n    );\r\n  }, [matrix, position]);\r\n\r\n  useDidUpdate(() => {\r\n    if (detectCollision(move.isRotation ? { tetrominoState: getRotatedMatrix(matrix) } : move)) {\r\n      if (move.isDown) {\r\n        const filledRowsAddresses = current.reduce((ac, row, rowAddress) => {\r\n          !row.some(tile => tile === tileFill.None) && ac.push(rowAddress);\r\n\r\n          return ac;\r\n        }, []);\r\n\r\n        dispatch(filledRowsAddresses.length\r\n          ? { type: actionType.SweepFilledRows, payload: { filledRowsAddresses, emptyRow } }\r\n          : { type: actionType.MergeState }\r\n        );\r\n      }\r\n    } else makeMove(move);\r\n  }, move);\r\n\r\n  return { sweptRowsCount, display: current };\r\n};\r\n","import { useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { matrices } from 'const';\r\n\r\nimport { getRotatedMatrix } from 'utils/rotated-matrix';\r\n\r\nconst actionType = {\r\n  Random: 'random',\r\n  Rotation: 'rotation',\r\n  Move: 'move',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.Random:\r\n      draft.matrix = matrices[Math.random() * matrices.length | 0];\r\n      draft.position = { rowAddress: 0, colAddress: (payload.width - draft.matrix.length) / 2 | 0 };\r\n\r\n      break;\r\n    case actionType.Move:\r\n      const { rowAddress = 0, colAddress = 0 } = payload.offset;\r\n\r\n      draft.position = produce(draft.position, dr => {\r\n        dr.rowAddress += rowAddress;\r\n        dr.colAddress += colAddress;\r\n      });\r\n\r\n      break;\r\n    case actionType.Rotation:\r\n      draft.matrix = getRotatedMatrix(draft.matrix);\r\n  }\r\n});\r\n\r\nexport const useTetromino = ({ width }) => {\r\n  const [{ matrix, position }, dispatch] = useReducer(reducer, {\r\n    matrix: [],\r\n    position: { rowAddress: 0, colAddress: 0 },\r\n  });\r\n\r\n  const randomize = () => {\r\n    dispatch({ type: actionType.Random, payload: { width } });\r\n  };\r\n\r\n  const makeMove = ({ isRotation, offset }) => {\r\n    dispatch(isRotation ? { type: actionType.Rotation } : { type: actionType.Move, payload: { offset } });\r\n  };\r\n\r\n  return { matrix, position, randomize, makeMove };\r\n};\r\n","class Move {\r\n  get isRotation() {\r\n    return this instanceof Rotation;\r\n  }\r\n\r\n  get isDown() {\r\n    return this instanceof DownMove;\r\n  }\r\n}\r\n\r\nexport class LeftMove extends Move {\r\n  offset = { rowAddress: 0, colAddress: -1 };\r\n}\r\n\r\nexport class Rotation extends Move {}\r\n\r\nexport class RightMove extends Move {\r\n  offset = { rowAddress: 0, colAddress: 1 };\r\n}\r\n\r\nexport class DownMove extends Move {\r\n  offset = { rowAddress: 1, colAddress: 0 };\r\n}\r\n","import React, { useEffect, useRef, useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { useDisplay, useDidUpdate, useInterval } from 'hooks';\r\n\r\nimport { keyCode as code } from 'const';\r\n\r\nimport { LeftMove, Rotation, RightMove, DownMove } from 'view-models/move';\r\n\r\nimport { Display } from '..';\r\n\r\nimport './Tetris.scss';\r\n\r\nconst actionType = {\r\n  LeftMove: 'left-move',\r\n  Rotation: 'rotation',\r\n  RightMove: 'right-move',\r\n  DownMove: 'down-move',\r\n  EnableAutoDrop: 'enable-auto-drop',\r\n  UpdateScore: 'update-score',\r\n  AutoDrop: 'auto-drop',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.LeftMove:\r\n      draft.move = new LeftMove;\r\n\r\n      break;\r\n    case actionType.Rotation:\r\n      draft.move = new Rotation;\r\n\r\n      break;\r\n    case actionType.RightMove:\r\n      draft.move = new RightMove;\r\n\r\n      break;\r\n    case actionType.DownMove:\r\n      draft.isAutoDrop = false;\r\n      draft.move = new DownMove;\r\n\r\n      break;\r\n    case actionType.EnableAutoDrop:\r\n      draft.isAutoDrop = true;\r\n\r\n      break;\r\n    case actionType.UpdateScore:\r\n      const { sweptRowsCount } = payload;\r\n\r\n      draft.score = sweptRowsCount ? draft.score + sweptRowsCount * 10 : 0;\r\n\r\n      break;\r\n    case actionType.AutoDrop:\r\n      draft.move = new DownMove;\r\n  }\r\n});\r\n\r\nexport const Tetris = ({ width, height }) => {\r\n  const [{ score, move, isAutoDrop }, dispatch] = useReducer(reducer, { score: 0, move: null, isAutoDrop: true });\r\n  const { display, sweptRowsCount } = useDisplay({ width, height, move });\r\n  const container = useRef();\r\n\r\n  const handleKeyDown = ({ keyCode }) => {\r\n    keyCode === code.ArrowLeft && dispatch({ type: actionType.LeftMove });\r\n    keyCode === code.ArrowUp && dispatch({ type: actionType.Rotation });\r\n    keyCode === code.ArrowRight && dispatch({ type: actionType.RightMove });\r\n    keyCode === code.ArrowDown && dispatch({ type: actionType.DownMove });\r\n  };\r\n\r\n  const handleKeyUp = ({ keyCode }) => {\r\n    keyCode === code.ArrowDown && dispatch({ type: actionType.EnableAutoDrop });\r\n  };\r\n\r\n  useEffect(() => {\r\n    container.current.focus();\r\n  }, []);\r\n\r\n  useDidUpdate(() => {\r\n    dispatch({ type: actionType.UpdateScore, payload: { sweptRowsCount } });\r\n  }, sweptRowsCount);\r\n\r\n  useInterval(() => {\r\n    dispatch({ type: actionType.AutoDrop });\r\n  }, isAutoDrop ? 800 : null);\r\n\r\n  return <div className='tetris' tabIndex='0' onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} ref={container}>\r\n    <div className='score'>{score}</div>\r\n    <Display state={display} width={width} />\r\n  </div>;\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nimport { tileFill } from 'const';\r\n\r\nimport './Tile.scss';\r\n\r\nexport const Tile = memo(({ state }) => {\r\n  let className = 'tile tile__';\r\n\r\n  switch (state) {\r\n    case tileFill.None:\r\n      className += 'none';\r\n\r\n      break;\r\n    case tileFill.I:\r\n      className += 'i';\r\n\r\n      break;\r\n    case tileFill.J:\r\n      className += 'j'\r\n\r\n      break;\r\n    case tileFill.L:\r\n      className += 'l';\r\n\r\n      break;\r\n    case tileFill.O:\r\n      className += 'o';\r\n\r\n      break;\r\n    case tileFill.S:\r\n      className += 's';\r\n\r\n      break;\r\n    case tileFill.T:\r\n      className += 't';\r\n\r\n      break;\r\n    case tileFill.Z:\r\n      className += 'z';\r\n\r\n      break;\r\n    default:\r\n      throw new Error(`Unexpected tile of \"${state}\"!`);\r\n  }\r\n\r\n  return <div className={className} />;\r\n});\r\n","import React from 'react';\r\n\r\nimport { Header, Tetris, Footer } from 'components';\r\n\r\nexport const App = () => <>\r\n  <Header />\r\n  <Tetris width={10} height={20} />\r\n  <Footer />\r\n</>;\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub);\r\n};\r\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport 'index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}