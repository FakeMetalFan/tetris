{"version":3,"sources":["components/Display/Display.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/key-code.js","const/move-code.js","const/move-offset.js","const/rotation-direction.js","const/tile-fill.js","view-models/tile.js","decorators/clone.js","view-models/tetromino.js","const/tetrominos.js","view-models/move.js","hooks/use-safe-ref.js","hooks/use-tetromino.js","components/Tetris/Tetris.js","hooks/use-display.js","hooks/use-interval.js","utils/tile-class-name.js","components/Tile/Tile.js","App.js","setupIcons.js","index.js"],"names":["Display","state","columnsCount","className","style","gridTemplateColumns","map","row","rowAddress","tile","tileAddress","key","Footer","href","target","rel","icon","Date","getFullYear","Header","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","keyCode","moveCode","moveOffset","colAddress","rotationDirection","Clockwise","Counterclockwise","tileFill","TileVM","fill","immerable","this","clone","propName","descriptor","value","args","cloneDeep","apply","Tetromino","matrix","id","uuid","position","produce","draft","direction","forEach","_","col","reverse","length","tetrominos","Move","code","_id","_code","LeftMove","offset","RightMove","RotationMove","DownMove","useSafeRef","initialValue","ref","setRef","useCallback","next","useTetromino","width","getRandomTetromino","item","Math","random","getCloned","useState","tetromino","setTetromino","randomize","makeMove","move","isRotation","getRotated","getMoved","Tetris","intervalDelay","setIntervalDelay","score","setScore","setMove","height","emptyRow","useMemo","Array","emptyDisplay","display","setDisplay","sweptRowsCount","setSweptRowsCount","mergedDisplay","setMergedDisplay","didCollide","some","isEmpty","targetRowAddress","targetColAddress","isDown","getOppositeMove","filledRowsAddresses","reduce","acc","push","address","splice","unshift","count","useDisplay","container","drop","focus","prevScore","delay","fnRef","intervalId","setInterval","clearInterval","useInterval","tabIndex","onKeyDown","onKeyUp","getTileClassName","prefix","Error","Tile","memo","App","library","add","faGithub","render","document","getElementById"],"mappings":"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","file":"static/js/main.17fb1af6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Tile } from '..';\r\n\r\nimport './Display.scss';\r\n\r\nexport const Display = ({ state, columnsCount }) => (\r\n  <div className='display' style={{gridTemplateColumns: `repeat(${columnsCount}, 1fr)`}}>\r\n    {state.map((row, rowAddress) =>\r\n      row.map((tile, tileAddress) => <Tile key={tileAddress * columnsCount + rowAddress} state={tile} />)\r\n    )}\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => (\r\n  <footer>\r\n    <span>\r\n      Powered by\r\n      <a className='icon' href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;<span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n","\r\nimport React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <span className='title'>Tetris</span>\r\n\r\n    <a className='icon' href='https://github.com/FakeMetalFan/tetris' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fn();\r\n    else didMount.current = true;\r\n    // eslint-disable-next-line\r\n  }, deps);\r\n};\r\n","export const keyCode = {\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n};\r\n","export const moveCode = {\r\n  Left: 1,\r\n  Rotation: 2,\r\n  Right: 3,\r\n  Down: 4,\r\n};\r\n","export const moveOffset = {\r\n  Left: { colAddress: -1 },\r\n  Right: { colAddress: 1 },\r\n  Down: { rowAddress: 1 },\r\n};\r\n","export const rotationDirection = {\r\n  Clockwise: 1,\r\n  Counterclockwise: -1,\r\n};\r\n","export const tileFill = {\r\n  None: 0,\r\n  I: 1,\r\n  J: 2,\r\n  L: 3,\r\n  O: 4,\r\n  S: 5,\r\n  T: 6,\r\n  Z: 7,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { tileFill } from 'const/tile-fill'; // to avoid circular dependency;\r\n\r\nexport class TileVM {\r\n  [immerable] = true;\r\n\r\n  constructor(\r\n    fill = tileFill.None\r\n  ) {\r\n    this.fill = fill;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.fill === tileFill.None;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash/cloneDeep';\r\n\r\nexport const clone = (target, propName, descriptor) => {\r\n  const { value: fn } = descriptor;\r\n\r\n  descriptor.value = function(...args) {\r\n    return cloneDeep(fn.apply(this, args));\r\n  };\r\n\r\n  return descriptor;\r\n};\r\n","import produce from 'immer';\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { rotationDirection } from 'const';\r\n\r\nimport { clone } from 'decorators/clone';\r\n\r\nexport class Tetromino {\r\n  id = uuid(); // to always detect a new piece;\r\n  position = { rowAddress: 0, colAddress: 0 };\r\n\r\n  matrix;\r\n\r\n  constructor(\r\n    matrix\r\n  ) {\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  @clone\r\n  getCloned(colAddress) {\r\n    this.id = uuid();\r\n    this.position.colAddress = colAddress;\r\n\r\n    return this;\r\n  }\r\n\r\n  @clone\r\n  getMoved({ rowAddress = 0, colAddress = 0 }) {\r\n    this.position = produce(this.position, draft => {\r\n      draft.rowAddress += rowAddress;\r\n      draft.colAddress += colAddress;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  @clone\r\n  getRotated(direction) {\r\n    this.matrix = produce(this.matrix, draft => {\r\n      draft.forEach((_, rowAddress) => {\r\n        draft[rowAddress] = this.matrix.map(col => col[rowAddress]);\r\n      });\r\n\r\n      if (direction === rotationDirection.Clockwise) draft.map(row => row.reverse());\r\n      else draft.reverse();\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  get width() {\r\n    return this.matrix.length;\r\n  }\r\n\r\n  get rowAddress() {\r\n    return this.position.rowAddress;\r\n  }\r\n\r\n  get colAddress() {\r\n    return this.position.colAddress;\r\n  }\r\n}\r\n","import { TileVM } from 'view-models/tile'; // to avoid circular dependency;\r\nimport { Tetromino } from 'view-models/tetromino'; // to avoid circular dependency;\r\n\r\nimport { tileFill } from './tile-fill';\r\n\r\nexport const tetrominos = [\r\n  new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.I), new TileVM(), new TileVM()],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.J), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.J), new TileVM()],\r\n    [new TileVM(tileFill.J), new TileVM(tileFill.J), new TileVM()],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.L), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.L), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.L), new TileVM(tileFill.L)],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n    [new TileVM(tileFill.O), new TileVM(tileFill.O)],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.S), new TileVM(tileFill.S)],\r\n    [new TileVM(tileFill.S), new TileVM(tileFill.S), new TileVM()],\r\n    [new TileVM(), new TileVM(), new TileVM()],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(), new TileVM(tileFill.T), new TileVM()],\r\n    [new TileVM(tileFill.T), new TileVM(tileFill.T), new TileVM(tileFill.T)],\r\n    [new TileVM(), new TileVM(), new TileVM()],\r\n  ]),\r\n  new Tetromino([\r\n    [new TileVM(tileFill.Z), new TileVM(tileFill.Z), new TileVM()],\r\n    [new TileVM(), new TileVM(tileFill.Z), new TileVM(tileFill.Z)],\r\n    [new TileVM(), new TileVM(), new TileVM()],\r\n  ]),\r\n];\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { moveCode, moveOffset, rotationDirection } from 'const';\r\n\r\nclass Move {\r\n  _id = uuid(); // to always detect a new move;\r\n\r\n  _code;\r\n\r\n  constructor(\r\n    code\r\n  ) {\r\n    this._code = code;\r\n  }\r\n\r\n  get isRotation() {\r\n    return this._code === moveCode.Rotation;\r\n  }\r\n\r\n  get isDown() {\r\n    return this._code === moveCode.Down;\r\n  }\r\n}\r\n\r\nexport class LeftMove extends Move {\r\n  offset = moveOffset.Left;\r\n\r\n  constructor() {\r\n    super(moveCode.Left);\r\n  }\r\n\r\n  getOppositeMove() {\r\n    return new RightMove();\r\n  }\r\n}\r\n\r\nexport class RotationMove extends Move {\r\n  constructor(\r\n    direction = rotationDirection.Clockwise\r\n  ) {\r\n    super(moveCode.Rotation);\r\n\r\n    this.direction = direction;\r\n  }\r\n\r\n  getOppositeMove() {\r\n    return new RotationMove(\r\n      rotationDirection[this.direction === rotationDirection.Clockwise ? 'Counterclockwise' : 'Clockwise']\r\n    );\r\n  }\r\n}\r\n\r\nexport class RightMove extends Move {\r\n  offset = moveOffset.Right;\r\n\r\n  constructor() {\r\n    super(moveCode.Right);\r\n  }\r\n\r\n  getOppositeMove() {\r\n    return new LeftMove();\r\n  }\r\n}\r\n\r\nexport class DownMove extends Move {\r\n  offset = moveOffset.Down;\r\n\r\n  constructor() {\r\n    super(moveCode.Down);\r\n  }\r\n}\r\n","import { useCallback, useRef } from 'react';\r\n\r\nexport const useSafeRef = initialValue => {\r\n  const ref = useRef(initialValue);\r\n  const setRef = useCallback(next => {\r\n    ref.current = next;\r\n  }, []);\r\n\r\n  return [ref.current, setRef];\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { tetrominos } from 'const';\r\n\r\nexport const useTetromino = ({ width }) => {\r\n  const getRandomTetromino = () => {\r\n    const item = tetrominos[Math.random() * tetrominos.length | 0];\r\n\r\n    return item.getCloned((width - item.width) / 2 | 0);\r\n  };\r\n\r\n  const [tetromino, setTetromino] = useState(() => getRandomTetromino());\r\n\r\n  const randomize = () => {\r\n    setTetromino(getRandomTetromino());\r\n  };\r\n\r\n  const makeMove = move => {\r\n    setTetromino(move.isRotation ? tetromino.getRotated(move.direction) : tetromino.getMoved(move.offset));\r\n  };\r\n\r\n  return { tetromino, randomize, makeMove };\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport { useDidUpdate, useDisplay, useInterval } from 'hooks';\r\n\r\nimport { keyCode } from 'const';\r\n\r\nimport { LeftMove, RotationMove, RightMove, DownMove } from 'view-models';\r\n\r\nimport { Display } from '..';\r\n\r\nimport './Tetris.scss';\r\n\r\nexport const Tetris = () => {\r\n  const width = 10;\r\n  const delay = 800;\r\n\r\n  const [intervalDelay, setIntervalDelay] = useState(delay);\r\n  const [score, setScore] = useState(0);\r\n  const [move, setMove] = useState(null);\r\n\r\n  const { display, sweptRowsCount } = useDisplay({ width, move, height: 20 });\r\n\r\n  const container = useRef();\r\n\r\n  const drop = () => {\r\n    setMove(new DownMove());\r\n  };\r\n\r\n  const handleKeyDown = ({ keyCode: code }) => {\r\n    code === keyCode.ArrowLeft && setMove(new LeftMove());\r\n    code === keyCode.ArrowUp && setMove(new RotationMove());\r\n    code === keyCode.ArrowRight && setMove(new RightMove());\r\n\r\n    if (code === keyCode.ArrowDown) {\r\n      setIntervalDelay(null);\r\n      drop();\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = ({ keyCode: code }) => {\r\n    code === keyCode.ArrowDown && setIntervalDelay(delay);\r\n  };\r\n\r\n  useEffect(() => {\r\n    container.current.focus();\r\n  }, []);\r\n\r\n  useDidUpdate(() => {\r\n    setScore(prevScore => sweptRowsCount ? prevScore + sweptRowsCount * 10 : 0);\r\n  }, sweptRowsCount);\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, intervalDelay);\r\n\r\n  return (\r\n    <div className='tetris' tabIndex='0' onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} ref={container}>\r\n      <div className='score'>{score}</div>\r\n      <Display state={display} columnsCount={width} />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport some from 'lodash/some';\r\n\r\nimport { TileVM } from 'view-models';\r\n\r\nimport { useDidUpdate, useTetromino, useSafeRef } from '.';\r\n\r\nexport const useDisplay = ({ width, height, move }) => {\r\n  const emptyRow = useMemo(() => Array(width).fill(new TileVM()), [width]);\r\n  const emptyDisplay = useMemo(() => Array(height).fill(emptyRow), [emptyRow, height]);\r\n\r\n  const [display, setDisplay] = useState(emptyDisplay);\r\n  const [sweptRowsCount, setSweptRowsCount] = useState(0);\r\n\r\n  const { tetromino, randomize, makeMove } = useTetromino({ width });\r\n\r\n  const [mergedDisplay, setMergedDisplay] = useSafeRef(display); // to recreate state when a new tetromino is drawn;\r\n\r\n  const didCollide = () => tetromino.matrix.some((row, rowAddress) => row.some(({ isEmpty }, colAddress) => {\r\n    const targetRowAddress = rowAddress + tetromino.rowAddress;\r\n    const targetColAddress = colAddress + tetromino.colAddress;\r\n\r\n    return !isEmpty && (!mergedDisplay[targetRowAddress]?.[targetColAddress]?.isEmpty // filled tile;\r\n      || targetRowAddress >= height // floor;\r\n      || (targetColAddress >= width || targetColAddress < 0) // walls;\r\n    );\r\n  }));\r\n\r\n  useEffect(() => {\r\n    if (didCollide())\r\n      if (move.isDown) setMergedDisplay(display);\r\n      else makeMove(move.getOppositeMove());\r\n    else setDisplay(produce(mergedDisplay, draft => {\r\n      tetromino.matrix.forEach((row, rowAddress) => {\r\n        row.forEach((tile, colAddress) => {\r\n          !tile.isEmpty && (draft[rowAddress + tetromino.rowAddress][colAddress + tetromino.colAddress] = tile);\r\n        });\r\n      });\r\n    }));\r\n    // eslint-disable-next-line\r\n  }, [tetromino.matrix, tetromino.position]);\r\n\r\n  useDidUpdate(() => {\r\n    makeMove(move);\r\n  }, move);\r\n\r\n  useDidUpdate(() => {\r\n    randomize();\r\n\r\n    const filledRowsAddresses = mergedDisplay.reduce((acc, row, rowAddress) => {\r\n      !some(row, 'isEmpty') && acc.push(rowAddress);\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n    if (filledRowsAddresses.length) {\r\n      setMergedDisplay(produce(mergedDisplay, draft => {\r\n        filledRowsAddresses.forEach(address => {\r\n          draft.splice(address, 1);\r\n          draft.unshift(emptyRow);\r\n        });\r\n      }));\r\n      setSweptRowsCount(count => count + filledRowsAddresses.length);\r\n    }\r\n  }, mergedDisplay);\r\n\r\n  useDidUpdate(() => {\r\n    if (didCollide()) {\r\n      setDisplay(emptyDisplay);\r\n      setMergedDisplay(emptyDisplay);\r\n      setSweptRowsCount(0);\r\n    }\r\n  }, tetromino.id);\r\n\r\n  return { display, sweptRowsCount };\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import { tileFill } from 'const';\r\n\r\nexport const getTileClassName = fill => {\r\n  const prefix = 'tile tile__';\r\n\r\n  switch (fill) {\r\n    case tileFill.None:\r\n      return `${prefix}none`;\r\n    case tileFill.I:\r\n      return `${prefix}i`;\r\n    case tileFill.J:\r\n      return `${prefix}j`;\r\n    case tileFill.L:\r\n      return `${prefix}l`;\r\n    case tileFill.O:\r\n      return `${prefix}o`;\r\n    case tileFill.S:\r\n      return `${prefix}s`;\r\n    case tileFill.T:\r\n      return `${prefix}t`;\r\n    case tileFill.Z:\r\n      return `${prefix}z`;\r\n    default:\r\n      throw new Error(`Unexpected tile fill of \"${fill}\"!`);\r\n  }\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nimport { getTileClassName } from 'utils/tile-class-name';\r\n\r\nimport './Tile.scss';\r\n\r\nexport const Tile = memo(({ state }) => (<div className={getTileClassName(state.fill)} />));\r\n","import React from 'react';\n\nimport { Header, Tetris, Footer } from 'components';\n\nexport const App = () => (\n  <>\n    <Header />\n    <Tetris />\n    <Footer />\n  </>\n);\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub);\r\n};\r\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport './index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}