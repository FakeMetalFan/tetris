{"version":3,"sources":["components/Display/Display.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/key-code.js","const/tile-fill.js","const/tetrominos-matrices.js","utils/empty-tile.js","utils/rotated-matrix.js","hooks/use-tetromino.js","components/Tetris/Tetris.js","hooks/use-display.js","hooks/use-interval.js","components/Tile/Tile.js","App.js","setupIcons.js","index.js"],"names":["Display","display","width","className","style","gridTemplateColumns","map","row","tileFill","colAddress","key","Footer","href","target","rel","icon","Date","getFullYear","Header","useDidUpdate","fn","fnRef","useRef","didMount","useEffect","current","deps","keyCode","tetrominosMatrices","isEmptyTile","tile","getRotatedMatrix","matrix","produce","draft","forEach","_","rowAddress","reverse","useTetromino","useState","setMatrix","position","setPosition","randomize","matr","Math","random","length","makeMove","isRotation","offset","Tetris","height","score","setScore","move","setMove","isAutoDrop","setIsAutoDrop","emptyRow","useMemo","Array","fill","emptyState","setDisplay","merged","setMerged","sweptRowsCount","setSweptRowsCount","detectCollision","tetrominoState","some","rowAddressAhead","colAddressAhead","willCollide","isDown","filledRowsAddresses","reduce","ac","push","address","splice","unshift","useDisplay","container","focus","delay","intervalId","setInterval","clearInterval","useInterval","tabIndex","onKeyDown","code","onKeyUp","ref","Tile","memo","Error","App","library","add","faGithub","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8690270.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Tile } from '..';\r\n\r\nimport './Display.scss';\r\n\r\nexport const Display = ({ display, width }) => <div\r\n  className='display'\r\n  style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\r\n>\r\n  {display.map(row => row.map((tileFill, colAddress) => <Tile key={colAddress} tileFill={tileFill} />))}\r\n</div>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => <footer>\r\n  <span>\r\n    Powered by\r\n    <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n    &copy;<span>{new Date().getFullYear()}</span>\r\n  </span>\r\n</footer>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => <header>\r\n  <span className='title'>Tetris</span>\r\n\r\n  <a href='https://github.com/FakeMetalFan/tetris' target='_blank' rel='noopener noreferrer'>\r\n    <FontAwesomeIcon icon={['fab', 'github']} />\r\n  </a>\r\n</header>;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const fnRef = useRef();\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn]);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fnRef.current();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n","export const keyCode = {\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n};\r\n","export const tileFill = {\r\n  None: 0,\r\n  I: 1,\r\n  J: 2,\r\n  L: 3,\r\n  O: 4,\r\n  S: 5,\r\n  T: 6,\r\n  Z: 7,\r\n};\r\n","import { tileFill } from './tile-fill';\r\n\r\nexport const tetrominosMatrices = [\r\n  [\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n    [tileFill.None, tileFill.I, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.J, tileFill.None],\r\n    [tileFill.None, tileFill.J, tileFill.None],\r\n    [tileFill.J, tileFill.J, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.L, tileFill.None],\r\n    [tileFill.None, tileFill.L, tileFill.None],\r\n    [tileFill.None, tileFill.L, tileFill.L],\r\n  ],\r\n  [\r\n    [tileFill.O, tileFill.O],\r\n    [tileFill.O, tileFill.O],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.S, tileFill.S],\r\n    [tileFill.S, tileFill.S, tileFill.None],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.None, tileFill.T, tileFill.None],\r\n    [tileFill.T, tileFill.T, tileFill.T],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n  [\r\n    [tileFill.Z, tileFill.Z, tileFill.None],\r\n    [tileFill.None, tileFill.Z, tileFill.Z],\r\n    [tileFill.None, tileFill.None, tileFill.None],\r\n  ],\r\n];\r\n","import { tileFill } from 'const';\r\n\r\nexport const isEmptyTile = tile => tile === tileFill.None;\r\n","import produce from 'immer';\r\n\r\nexport const getRotatedMatrix = matrix => produce(matrix, draft => {\r\n  draft.forEach((_, rowAddress) => {\r\n    draft[rowAddress] = matrix.map(row => row[rowAddress]);\r\n  });\r\n\r\n  draft.map(row => row.reverse());\r\n});\r\n","import { useState } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { tetrominosMatrices } from 'const';\r\n\r\nimport { getRotatedMatrix } from 'utils';\r\n\r\nexport const useTetromino = ({ width }) => {\r\n  const [matrix, setMatrix] = useState([]);\r\n  const [position, setPosition] = useState({ rowAddress: 0, colAddress: 0 });\r\n\r\n  const randomize = () => {\r\n    const matr = tetrominosMatrices[Math.random() * tetrominosMatrices.length | 0];\r\n\r\n    setMatrix(matr);\r\n    setPosition({ rowAddress: 0, colAddress: (width - matr.length) / 2 | 0 });\r\n  };\r\n\r\n  const makeMove = ({ isRotation, offset }) => {\r\n    if (isRotation) setMatrix(getRotatedMatrix(matrix));\r\n    else setPosition(produce(position, draft => {\r\n      draft.rowAddress += offset.rowAddress;\r\n      draft.colAddress += offset.colAddress;\r\n    }));\r\n  };\r\n\r\n  return { matrix, position, randomize, makeMove };\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport { useDisplay, useDidUpdate, useInterval } from 'hooks';\r\n\r\nimport { keyCode as code } from 'const';\r\n\r\nimport { Display } from '..';\r\n\r\nimport './Tetris.scss';\r\n\r\nexport const Tetris = ({ width, height }) => {\r\n  const [score, setScore] = useState(0);\r\n  const [move, setMove] = useState(null);\r\n  const [isAutoDrop, setIsAutoDrop] = useState(true);\r\n\r\n  const { display, sweptRowsCount } = useDisplay({ width, height, move });\r\n\r\n  const container = useRef();\r\n\r\n  const getDownMove = () => ({ isDown: true, offset: { rowAddress: 1, colAddress: 0 } });\r\n\r\n  const handleKeyDown = ({ keyCode }) => {\r\n    keyCode === code.ArrowLeft && setMove({ offset: { rowAddress: 0, colAddress: -1 } });\r\n    keyCode === code.ArrowUp && setMove({ isRotation: true });\r\n    keyCode === code.ArrowRight && setMove({ offset: { rowAddress: 0, colAddress: 1 } });\r\n\r\n    if (keyCode === code.ArrowDown) {\r\n      setIsAutoDrop(false);\r\n      setMove(getDownMove());\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = ({ keyCode }) => {\r\n    keyCode === code.ArrowDown && setIsAutoDrop(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    container.current.focus();\r\n  }, []);\r\n\r\n  useDidUpdate(() => {\r\n    setScore(sweptRowsCount ? score + sweptRowsCount * 10 : 0);\r\n  }, sweptRowsCount);\r\n\r\n  useInterval(() => {\r\n    setMove(getDownMove());\r\n  }, isAutoDrop ? 800 : null);\r\n\r\n  return <div className='tetris' tabIndex='0' onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} ref={container}>\r\n    <div className='score'>{score}</div>\r\n    <Display display={display} width={width} />\r\n  </div>;\r\n};\r\n","import { useEffect, useMemo, useState } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport { tileFill } from 'const';\r\n\r\nimport { isEmptyTile, getRotatedMatrix } from 'utils';\r\n\r\nimport { useDidUpdate, useTetromino } from '.';\r\n\r\nexport const useDisplay = ({ width, height, move }) => {\r\n  const emptyRow = useMemo(() => Array(width).fill(tileFill.None), [width]);\r\n  const emptyState = useMemo(() => Array(height).fill(emptyRow), [emptyRow, height]);\r\n\r\n  const [display, setDisplay] = useState(emptyState);\r\n  const [merged, setMerged] = useState(emptyState);\r\n  const [sweptRowsCount, setSweptRowsCount] = useState(0);\r\n\r\n  const { matrix, position, randomize, makeMove } = useTetromino({ width });\r\n\r\n  const detectCollision = ({ tetrominoState = matrix, offset = { rowAddress: 0, colAddress: 0 } } = {}) =>\r\n    tetrominoState.some((row, rowAddress) => row.some((tile, colAddress) => {\r\n      const rowAddressAhead = rowAddress + position.rowAddress + offset.rowAddress;\r\n      const colAddressAhead = colAddress + position.colAddress + offset.colAddress;\r\n\r\n      return !isEmptyTile(tile) && (!isEmptyTile(merged[rowAddressAhead]?.[colAddressAhead])\r\n        || rowAddressAhead >= height || colAddressAhead >= width || colAddressAhead < 0\r\n      );\r\n    }));\r\n\r\n  useEffect(() => {\r\n    randomize();\r\n  }, [merged]);\r\n\r\n  useEffect(() => {\r\n    if (detectCollision()) {\r\n      setDisplay(emptyState);\r\n      setMerged(emptyState);\r\n      setSweptRowsCount(0);\r\n    } else setDisplay(produce(merged, draft => {\r\n      matrix.forEach((row, rowAddress) => {\r\n        row.forEach((tile, colAddress) => {\r\n          !isEmptyTile(tile) && (draft[rowAddress + position.rowAddress][colAddress + position.colAddress] = tile);\r\n        });\r\n      });\r\n    }));\r\n  }, [matrix, position]);\r\n\r\n  useDidUpdate(() => {\r\n    const willCollide = detectCollision(move.isRotation ? { tetrominoState: getRotatedMatrix(matrix) } : move);\r\n\r\n    if (willCollide && move.isDown) {\r\n      const filledRowsAddresses = display.reduce((ac, row, rowAddress) => {\r\n        !row.some(isEmptyTile) && ac.push(rowAddress);\r\n\r\n        return ac;\r\n      }, []);\r\n\r\n      const { length } = filledRowsAddresses; \r\n\r\n      if (length) {\r\n        setSweptRowsCount(sweptRowsCount + length);\r\n        setMerged(produce(display, draft => {\r\n          filledRowsAddresses.forEach(address => {\r\n            draft.splice(address, 1);\r\n            draft.unshift(emptyRow);\r\n          });\r\n        }));\r\n      } else setMerged(display);\r\n    } else if (!willCollide) makeMove(move);\r\n  }, move);\r\n\r\n  return { display, sweptRowsCount };\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nimport { tileFill as fill } from 'const';\r\n\r\nimport './Tile.scss';\r\n\r\nexport const Tile = memo(({ tileFill }) => {\r\n  let className = 'tile tile__';\r\n\r\n  switch (tileFill) {\r\n    case fill.None:\r\n      className = 'tile';\r\n\r\n      break;\r\n    case fill.I:\r\n      className += 'i';\r\n\r\n      break;\r\n    case fill.J:\r\n      className += 'j'\r\n\r\n      break;\r\n    case fill.L:\r\n      className += 'l';\r\n\r\n      break;\r\n    case fill.O:\r\n      className += 'o';\r\n\r\n      break;\r\n    case fill.S:\r\n      className += 's';\r\n\r\n      break;\r\n    case fill.T:\r\n      className += 't';\r\n\r\n      break;\r\n    case fill.Z:\r\n      className += 'z';\r\n\r\n      break;\r\n    default:\r\n      throw new Error(`Unexpected tile of \"${tileFill}\"!`);\r\n  }\r\n\r\n  return <div className={className} />;\r\n});\r\n","import React from 'react';\r\n\r\nimport { Header, Tetris, Footer } from 'components';\r\n\r\nexport const App = () => <>\r\n  <Header />\r\n  <Tetris width={10} height={20} />\r\n  <Footer />\r\n</>;\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub);\r\n};\r\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport 'index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}